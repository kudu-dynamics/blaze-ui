-- File auto generated by purescript-bridge! --
module Blaze.Types.CallGraph where

import Data.BinaryAnalysis (Address, Symbol)
import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)
import Prim (String)

import Prelude

newtype Function
  = Function
      { _functionSymbol :: Maybe Symbol
      , _functionName :: String
      , _functionAddress :: Address
      }


instance showFunction :: Show Function where
  show x = genericShow x
derive instance eqFunction :: Eq Function
derive instance ordFunction :: Ord Function
instance encodeFunction :: Encode Function where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFunction :: Decode Function where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFunction :: Generic Function _
derive instance newtypeFunction :: Newtype Function _
--------------------------------------------------------------------------------
_Function :: Iso' Function { _functionSymbol :: Maybe Symbol
                           , _functionName :: String
                           , _functionAddress :: Address }
_Function = _Newtype

functionSymbol :: Lens' Function (Maybe Symbol)
functionSymbol = _Newtype <<< prop (SProxy :: SProxy "_functionSymbol")

functionName :: Lens' Function String
functionName = _Newtype <<< prop (SProxy :: SProxy "_functionName")

functionAddress :: Lens' Function Address
functionAddress = _Newtype <<< prop (SProxy :: SProxy "_functionAddress")
--------------------------------------------------------------------------------
