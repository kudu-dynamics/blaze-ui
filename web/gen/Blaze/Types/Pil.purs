-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil where

import Blaze.Types.Pil.Common (Ctx, PilVar)
import Blaze.Types.Pil.Op.ConstPtrOp (ConstPtrOp)
import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)
import Prim (Array, String)

import Prelude

data Statement a
  = Def (DefOp a)
  | Constraint (ConstraintOp a)
  | Store (StoreOp a)
  | UnimplInstr String
  | UnimplMem (UnimplMemOp a)
  | Undef
  | Nop
  | Annotation String
  | EnterContext (EnterContextOp a)
  | ExitContext (ExitContextOp a)
  | Call (CallOp a)
  | DefPhi (DefPhiOp a)


instance showStatement :: (Show a) => Show (Statement a) where
  show x = genericShow x
derive instance eqStatement :: (Eq a) => Eq (Statement a)
derive instance ordStatement :: (Ord a) => Ord (Statement a)
instance encodeStatement :: (Encode a) => Encode (Statement a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeStatement :: (Decode a) => Decode (Statement a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericStatement :: Generic (Statement a) _
--------------------------------------------------------------------------------
_Def :: forall a. Prism' (Statement a) (DefOp a)
_Def = prism' Def f
  where
    f (Def a) = Just $ a
    f _ = Nothing

_Constraint :: forall a. Prism' (Statement a) (ConstraintOp a)
_Constraint = prism' Constraint f
  where
    f (Constraint a) = Just $ a
    f _ = Nothing

_Store :: forall a. Prism' (Statement a) (StoreOp a)
_Store = prism' Store f
  where
    f (Store a) = Just $ a
    f _ = Nothing

_UnimplInstr :: forall a. Prism' (Statement a) String
_UnimplInstr = prism' UnimplInstr f
  where
    f (UnimplInstr a) = Just $ a
    f _ = Nothing

_UnimplMem :: forall a. Prism' (Statement a) (UnimplMemOp a)
_UnimplMem = prism' UnimplMem f
  where
    f (UnimplMem a) = Just $ a
    f _ = Nothing

_Undef :: forall a. Prism' (Statement a) Unit
_Undef = prism' (\_ -> Undef) f
  where
    f Undef = Just unit
    f _ = Nothing

_Nop :: forall a. Prism' (Statement a) Unit
_Nop = prism' (\_ -> Nop) f
  where
    f Nop = Just unit
    f _ = Nothing

_Annotation :: forall a. Prism' (Statement a) String
_Annotation = prism' Annotation f
  where
    f (Annotation a) = Just $ a
    f _ = Nothing

_EnterContext :: forall a. Prism' (Statement a) (EnterContextOp a)
_EnterContext = prism' EnterContext f
  where
    f (EnterContext a) = Just $ a
    f _ = Nothing

_ExitContext :: forall a. Prism' (Statement a) (ExitContextOp a)
_ExitContext = prism' ExitContext f
  where
    f (ExitContext a) = Just $ a
    f _ = Nothing

_Call :: forall a. Prism' (Statement a) (CallOp a)
_Call = prism' Call f
  where
    f (Call a) = Just $ a
    f _ = Nothing

_DefPhi :: forall a. Prism' (Statement a) (DefPhiOp a)
_DefPhi = prism' DefPhi f
  where
    f (DefPhi a) = Just $ a
    f _ = Nothing
--------------------------------------------------------------------------------
newtype DefOp a
  = DefOp
      { var :: PilVar
      , value :: a
      }


instance showDefOp :: (Show a) => Show (DefOp a) where
  show x = genericShow x
derive instance eqDefOp :: (Eq a) => Eq (DefOp a)
derive instance ordDefOp :: (Ord a) => Ord (DefOp a)
instance encodeDefOp :: (Encode a) => Encode (DefOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeDefOp :: (Decode a) => Decode (DefOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericDefOp :: Generic (DefOp a) _
derive instance newtypeDefOp :: Newtype (DefOp a) _
--------------------------------------------------------------------------------
_DefOp :: forall a. Iso' (DefOp a) { var :: PilVar, value :: a }
_DefOp = _Newtype
--------------------------------------------------------------------------------
newtype ConstraintOp a
  = ConstraintOp
      { condition :: a
      }


instance showConstraintOp :: (Show a) => Show (ConstraintOp a) where
  show x = genericShow x
derive instance eqConstraintOp :: (Eq a) => Eq (ConstraintOp a)
derive instance ordConstraintOp :: (Ord a) => Ord (ConstraintOp a)
instance encodeConstraintOp :: (Encode a) => Encode (ConstraintOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeConstraintOp :: (Decode a) => Decode (ConstraintOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericConstraintOp :: Generic (ConstraintOp a) _
derive instance newtypeConstraintOp :: Newtype (ConstraintOp a) _
--------------------------------------------------------------------------------
_ConstraintOp :: forall a. Iso' (ConstraintOp a) { condition :: a }
_ConstraintOp = _Newtype
--------------------------------------------------------------------------------
newtype StoreOp a
  = StoreOp
      { addr :: a
      , value :: a
      }


instance showStoreOp :: (Show a) => Show (StoreOp a) where
  show x = genericShow x
derive instance eqStoreOp :: (Eq a) => Eq (StoreOp a)
derive instance ordStoreOp :: (Ord a) => Ord (StoreOp a)
instance encodeStoreOp :: (Encode a) => Encode (StoreOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeStoreOp :: (Decode a) => Decode (StoreOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericStoreOp :: Generic (StoreOp a) _
derive instance newtypeStoreOp :: Newtype (StoreOp a) _
--------------------------------------------------------------------------------
_StoreOp :: forall a. Iso' (StoreOp a) { addr :: a, value :: a }
_StoreOp = _Newtype
--------------------------------------------------------------------------------
newtype UnimplMemOp a
  = UnimplMemOp
      { src :: a
      }


instance showUnimplMemOp :: (Show a) => Show (UnimplMemOp a) where
  show x = genericShow x
derive instance eqUnimplMemOp :: (Eq a) => Eq (UnimplMemOp a)
derive instance ordUnimplMemOp :: (Ord a) => Ord (UnimplMemOp a)
instance encodeUnimplMemOp :: (Encode a) => Encode (UnimplMemOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeUnimplMemOp :: (Decode a) => Decode (UnimplMemOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericUnimplMemOp :: Generic (UnimplMemOp a) _
derive instance newtypeUnimplMemOp :: Newtype (UnimplMemOp a) _
--------------------------------------------------------------------------------
_UnimplMemOp :: forall a. Iso' (UnimplMemOp a) { src :: a }
_UnimplMemOp = _Newtype
--------------------------------------------------------------------------------
newtype EnterContextOp a
  = EnterContextOp
      { ctx :: Ctx
      }


instance showEnterContextOp :: Show (EnterContextOp a) where
  show x = genericShow x
derive instance eqEnterContextOp :: Eq (EnterContextOp a)
derive instance ordEnterContextOp :: Ord (EnterContextOp a)
instance encodeEnterContextOp :: Encode (EnterContextOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeEnterContextOp :: Decode (EnterContextOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericEnterContextOp :: Generic (EnterContextOp a) _
derive instance newtypeEnterContextOp :: Newtype (EnterContextOp a) _
--------------------------------------------------------------------------------
_EnterContextOp :: forall a. Iso' (EnterContextOp a) { ctx :: Ctx }
_EnterContextOp = _Newtype
--------------------------------------------------------------------------------
newtype ExitContextOp a
  = ExitContextOp
      { leavingCtx :: Ctx
      , returningToCtx :: Ctx
      }


instance showExitContextOp :: Show (ExitContextOp a) where
  show x = genericShow x
derive instance eqExitContextOp :: Eq (ExitContextOp a)
derive instance ordExitContextOp :: Ord (ExitContextOp a)
instance encodeExitContextOp :: Encode (ExitContextOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeExitContextOp :: Decode (ExitContextOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericExitContextOp :: Generic (ExitContextOp a) _
derive instance newtypeExitContextOp :: Newtype (ExitContextOp a) _
--------------------------------------------------------------------------------
_ExitContextOp :: forall a. Iso' (ExitContextOp a) { leavingCtx :: Ctx
                                                   , returningToCtx :: Ctx }
_ExitContextOp = _Newtype
--------------------------------------------------------------------------------
newtype CallOp a
  = CallOp
      { dest :: CallDest a
      , name :: Maybe String
      , params :: Array a
      }


instance showCallOp :: (Show a) => Show (CallOp a) where
  show x = genericShow x
derive instance eqCallOp :: (Eq a) => Eq (CallOp a)
derive instance ordCallOp :: (Ord a) => Ord (CallOp a)
instance encodeCallOp :: (Encode a) => Encode (CallOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCallOp :: (Decode a) => Decode (CallOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCallOp :: Generic (CallOp a) _
derive instance newtypeCallOp :: Newtype (CallOp a) _
--------------------------------------------------------------------------------
_CallOp :: forall a. Iso' (CallOp a) { dest :: CallDest a
                                     , name :: Maybe String
                                     , params :: Array a }
_CallOp = _Newtype
--------------------------------------------------------------------------------
newtype DefPhiOp a
  = DefPhiOp
      { dest :: PilVar
      , src :: Array PilVar
      }


instance showDefPhiOp :: Show (DefPhiOp a) where
  show x = genericShow x
derive instance eqDefPhiOp :: Eq (DefPhiOp a)
derive instance ordDefPhiOp :: Ord (DefPhiOp a)
instance encodeDefPhiOp :: Encode (DefPhiOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeDefPhiOp :: Decode (DefPhiOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericDefPhiOp :: Generic (DefPhiOp a) _
derive instance newtypeDefPhiOp :: Newtype (DefPhiOp a) _
--------------------------------------------------------------------------------
_DefPhiOp :: forall a. Iso' (DefPhiOp a) { dest :: PilVar, src :: Array PilVar }
_DefPhiOp = _Newtype
--------------------------------------------------------------------------------
data CallDest a
  = CallConstPtr (ConstPtrOp a)
  | CallExpr a
  | CallExprs (Array a)


instance showCallDest :: (Show a) => Show (CallDest a) where
  show x = genericShow x
derive instance eqCallDest :: (Eq a) => Eq (CallDest a)
derive instance ordCallDest :: (Ord a) => Ord (CallDest a)
instance encodeCallDest :: (Encode a) => Encode (CallDest a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCallDest :: (Decode a) => Decode (CallDest a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCallDest :: Generic (CallDest a) _
--------------------------------------------------------------------------------
_CallConstPtr :: forall a. Prism' (CallDest a) (ConstPtrOp a)
_CallConstPtr = prism' CallConstPtr f
  where
    f (CallConstPtr a) = Just $ a
    f _ = Nothing

_CallExpr :: forall a. Prism' (CallDest a) a
_CallExpr = prism' CallExpr f
  where
    f (CallExpr a) = Just $ a
    f _ = Nothing

_CallExprs :: forall a. Prism' (CallDest a) (Array a)
_CallExprs = prism' CallExprs f
  where
    f (CallExprs a) = Just $ a
    f _ = Nothing
--------------------------------------------------------------------------------
