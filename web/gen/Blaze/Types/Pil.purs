-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil where

import Blaze.Types.Pil.Common (Ctx, PilVar, StackOffset)
import Blaze.Types.Pil.Op.AdcOp (AdcOp)
import Blaze.Types.Pil.Op.AddOp (AddOp)
import Blaze.Types.Pil.Op.AddOverflowOp (AddOverflowOp)
import Blaze.Types.Pil.Op.AndOp (AndOp)
import Blaze.Types.Pil.Op.AsrOp (AsrOp)
import Blaze.Types.Pil.Op.BoolToIntOp (BoolToIntOp)
import Blaze.Types.Pil.Op.CeilOp (CeilOp)
import Blaze.Types.Pil.Op.CmpEOp (CmpEOp)
import Blaze.Types.Pil.Op.CmpNeOp (CmpNeOp)
import Blaze.Types.Pil.Op.CmpSgeOp (CmpSgeOp)
import Blaze.Types.Pil.Op.CmpSgtOp (CmpSgtOp)
import Blaze.Types.Pil.Op.CmpSleOp (CmpSleOp)
import Blaze.Types.Pil.Op.CmpSltOp (CmpSltOp)
import Blaze.Types.Pil.Op.CmpUgeOp (CmpUgeOp)
import Blaze.Types.Pil.Op.CmpUgtOp (CmpUgtOp)
import Blaze.Types.Pil.Op.CmpUleOp (CmpUleOp)
import Blaze.Types.Pil.Op.CmpUltOp (CmpUltOp)
import Blaze.Types.Pil.Op.ConstFloatOp (ConstFloatOp)
import Blaze.Types.Pil.Op.ConstOp (ConstOp)
import Blaze.Types.Pil.Op.ConstPtrOp (ConstPtrOp)
import Blaze.Types.Pil.Op.DivsDpOp (DivsDpOp)
import Blaze.Types.Pil.Op.DivsOp (DivsOp)
import Blaze.Types.Pil.Op.DivuDpOp (DivuDpOp)
import Blaze.Types.Pil.Op.DivuOp (DivuOp)
import Blaze.Types.Pil.Op.FabsOp (FabsOp)
import Blaze.Types.Pil.Op.FaddOp (FaddOp)
import Blaze.Types.Pil.Op.FcmpEOp (FcmpEOp)
import Blaze.Types.Pil.Op.FcmpGeOp (FcmpGeOp)
import Blaze.Types.Pil.Op.FcmpGtOp (FcmpGtOp)
import Blaze.Types.Pil.Op.FcmpLeOp (FcmpLeOp)
import Blaze.Types.Pil.Op.FcmpLtOp (FcmpLtOp)
import Blaze.Types.Pil.Op.FcmpNeOp (FcmpNeOp)
import Blaze.Types.Pil.Op.FcmpOOp (FcmpOOp)
import Blaze.Types.Pil.Op.FcmpUoOp (FcmpUoOp)
import Blaze.Types.Pil.Op.FdivOp (FdivOp)
import Blaze.Types.Pil.Op.FloatConvOp (FloatConvOp)
import Blaze.Types.Pil.Op.FloatToIntOp (FloatToIntOp)
import Blaze.Types.Pil.Op.FloorOp (FloorOp)
import Blaze.Types.Pil.Op.FmulOp (FmulOp)
import Blaze.Types.Pil.Op.FnegOp (FnegOp)
import Blaze.Types.Pil.Op.FsqrtOp (FsqrtOp)
import Blaze.Types.Pil.Op.FsubOp (FsubOp)
import Blaze.Types.Pil.Op.FtruncOp (FtruncOp)
import Blaze.Types.Pil.Op.ImportOp (ImportOp)
import Blaze.Types.Pil.Op.IntToFloatOp (IntToFloatOp)
import Blaze.Types.Pil.Op.LoadOp (LoadOp)
import Blaze.Types.Pil.Op.LowPartOp (LowPartOp)
import Blaze.Types.Pil.Op.LslOp (LslOp)
import Blaze.Types.Pil.Op.LsrOp (LsrOp)
import Blaze.Types.Pil.Op.ModsDpOp (ModsDpOp)
import Blaze.Types.Pil.Op.ModsOp (ModsOp)
import Blaze.Types.Pil.Op.ModuDpOp (ModuDpOp)
import Blaze.Types.Pil.Op.ModuOp (ModuOp)
import Blaze.Types.Pil.Op.MulOp (MulOp)
import Blaze.Types.Pil.Op.MulsDpOp (MulsDpOp)
import Blaze.Types.Pil.Op.MuluDpOp (MuluDpOp)
import Blaze.Types.Pil.Op.NegOp (NegOp)
import Blaze.Types.Pil.Op.NotOp (NotOp)
import Blaze.Types.Pil.Op.OrOp (OrOp)
import Blaze.Types.Pil.Op.RlcOp (RlcOp)
import Blaze.Types.Pil.Op.RolOp (RolOp)
import Blaze.Types.Pil.Op.RorOp (RorOp)
import Blaze.Types.Pil.Op.RoundToIntOp (RoundToIntOp)
import Blaze.Types.Pil.Op.RrcOp (RrcOp)
import Blaze.Types.Pil.Op.SbbOp (SbbOp)
import Blaze.Types.Pil.Op.SubOp (SubOp)
import Blaze.Types.Pil.Op.SxOp (SxOp)
import Blaze.Types.Pil.Op.TestBitOp (TestBitOp)
import Blaze.Types.Pil.Op.XorOp (XorOp)
import Blaze.Types.Pil.Op.ZxOp (ZxOp)
import Data.BinaryAnalysis (ByteOffset, Bytes)
import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Int64 (Int64)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)
import Prim (Array, Boolean, Int, String)

import Prelude

data Statement a
  = Def (DefOp a)
  | Constraint (ConstraintOp a)
  | Store (StoreOp a)
  | UnimplInstr String
  | UnimplMem (UnimplMemOp a)
  | Undef
  | Nop
  | Annotation String
  | EnterContext (EnterContextOp a)
  | ExitContext (ExitContextOp a)
  | Call (CallOp a)
  | DefPhi (DefPhiOp a)


instance showStatement :: (Show a) => Show (Statement a) where
  show x = genericShow x
derive instance eqStatement :: (Eq a) => Eq (Statement a)
derive instance ordStatement :: (Ord a) => Ord (Statement a)
instance encodeStatement :: (Encode a) => Encode (Statement a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeStatement :: (Decode a) => Decode (Statement a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericStatement :: Generic (Statement a) _
--------------------------------------------------------------------------------
_Def :: forall a. Prism' (Statement a) (DefOp a)
_Def = prism' Def f
  where
    f (Def a) = Just $ a
    f _ = Nothing

_Constraint :: forall a. Prism' (Statement a) (ConstraintOp a)
_Constraint = prism' Constraint f
  where
    f (Constraint a) = Just $ a
    f _ = Nothing

_Store :: forall a. Prism' (Statement a) (StoreOp a)
_Store = prism' Store f
  where
    f (Store a) = Just $ a
    f _ = Nothing

_UnimplInstr :: forall a. Prism' (Statement a) String
_UnimplInstr = prism' UnimplInstr f
  where
    f (UnimplInstr a) = Just $ a
    f _ = Nothing

_UnimplMem :: forall a. Prism' (Statement a) (UnimplMemOp a)
_UnimplMem = prism' UnimplMem f
  where
    f (UnimplMem a) = Just $ a
    f _ = Nothing

_Undef :: forall a. Prism' (Statement a) Unit
_Undef = prism' (\_ -> Undef) f
  where
    f Undef = Just unit
    f _ = Nothing

_Nop :: forall a. Prism' (Statement a) Unit
_Nop = prism' (\_ -> Nop) f
  where
    f Nop = Just unit
    f _ = Nothing

_Annotation :: forall a. Prism' (Statement a) String
_Annotation = prism' Annotation f
  where
    f (Annotation a) = Just $ a
    f _ = Nothing

_EnterContext :: forall a. Prism' (Statement a) (EnterContextOp a)
_EnterContext = prism' EnterContext f
  where
    f (EnterContext a) = Just $ a
    f _ = Nothing

_ExitContext :: forall a. Prism' (Statement a) (ExitContextOp a)
_ExitContext = prism' ExitContext f
  where
    f (ExitContext a) = Just $ a
    f _ = Nothing

_Call :: forall a. Prism' (Statement a) (CallOp a)
_Call = prism' Call f
  where
    f (Call a) = Just $ a
    f _ = Nothing

_DefPhi :: forall a. Prism' (Statement a) (DefPhiOp a)
_DefPhi = prism' DefPhi f
  where
    f (DefPhi a) = Just $ a
    f _ = Nothing
--------------------------------------------------------------------------------
newtype DefOp a
  = DefOp
      { var :: PilVar
      , value :: a
      }


instance showDefOp :: (Show a) => Show (DefOp a) where
  show x = genericShow x
derive instance eqDefOp :: (Eq a) => Eq (DefOp a)
derive instance ordDefOp :: (Ord a) => Ord (DefOp a)
instance encodeDefOp :: (Encode a) => Encode (DefOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeDefOp :: (Decode a) => Decode (DefOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericDefOp :: Generic (DefOp a) _
derive instance newtypeDefOp :: Newtype (DefOp a) _
--------------------------------------------------------------------------------
_DefOp :: forall a. Iso' (DefOp a) { var :: PilVar, value :: a }
_DefOp = _Newtype
--------------------------------------------------------------------------------
newtype ConstraintOp a
  = ConstraintOp
      { condition :: a
      }


instance showConstraintOp :: (Show a) => Show (ConstraintOp a) where
  show x = genericShow x
derive instance eqConstraintOp :: (Eq a) => Eq (ConstraintOp a)
derive instance ordConstraintOp :: (Ord a) => Ord (ConstraintOp a)
instance encodeConstraintOp :: (Encode a) => Encode (ConstraintOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeConstraintOp :: (Decode a) => Decode (ConstraintOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericConstraintOp :: Generic (ConstraintOp a) _
derive instance newtypeConstraintOp :: Newtype (ConstraintOp a) _
--------------------------------------------------------------------------------
_ConstraintOp :: forall a. Iso' (ConstraintOp a) { condition :: a }
_ConstraintOp = _Newtype
--------------------------------------------------------------------------------
newtype StoreOp a
  = StoreOp
      { addr :: a
      , value :: a
      }


instance showStoreOp :: (Show a) => Show (StoreOp a) where
  show x = genericShow x
derive instance eqStoreOp :: (Eq a) => Eq (StoreOp a)
derive instance ordStoreOp :: (Ord a) => Ord (StoreOp a)
instance encodeStoreOp :: (Encode a) => Encode (StoreOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeStoreOp :: (Decode a) => Decode (StoreOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericStoreOp :: Generic (StoreOp a) _
derive instance newtypeStoreOp :: Newtype (StoreOp a) _
--------------------------------------------------------------------------------
_StoreOp :: forall a. Iso' (StoreOp a) { addr :: a, value :: a }
_StoreOp = _Newtype
--------------------------------------------------------------------------------
newtype UnimplMemOp a
  = UnimplMemOp
      { src :: a
      }


instance showUnimplMemOp :: (Show a) => Show (UnimplMemOp a) where
  show x = genericShow x
derive instance eqUnimplMemOp :: (Eq a) => Eq (UnimplMemOp a)
derive instance ordUnimplMemOp :: (Ord a) => Ord (UnimplMemOp a)
instance encodeUnimplMemOp :: (Encode a) => Encode (UnimplMemOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeUnimplMemOp :: (Decode a) => Decode (UnimplMemOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericUnimplMemOp :: Generic (UnimplMemOp a) _
derive instance newtypeUnimplMemOp :: Newtype (UnimplMemOp a) _
--------------------------------------------------------------------------------
_UnimplMemOp :: forall a. Iso' (UnimplMemOp a) { src :: a }
_UnimplMemOp = _Newtype
--------------------------------------------------------------------------------
newtype EnterContextOp a
  = EnterContextOp
      { ctx :: Ctx
      }


instance showEnterContextOp :: Show (EnterContextOp a) where
  show x = genericShow x
derive instance eqEnterContextOp :: Eq (EnterContextOp a)
derive instance ordEnterContextOp :: Ord (EnterContextOp a)
instance encodeEnterContextOp :: Encode (EnterContextOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeEnterContextOp :: Decode (EnterContextOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericEnterContextOp :: Generic (EnterContextOp a) _
derive instance newtypeEnterContextOp :: Newtype (EnterContextOp a) _
--------------------------------------------------------------------------------
_EnterContextOp :: forall a. Iso' (EnterContextOp a) { ctx :: Ctx }
_EnterContextOp = _Newtype
--------------------------------------------------------------------------------
newtype ExitContextOp a
  = ExitContextOp
      { leavingCtx :: Ctx
      , returningToCtx :: Ctx
      }


instance showExitContextOp :: Show (ExitContextOp a) where
  show x = genericShow x
derive instance eqExitContextOp :: Eq (ExitContextOp a)
derive instance ordExitContextOp :: Ord (ExitContextOp a)
instance encodeExitContextOp :: Encode (ExitContextOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeExitContextOp :: Decode (ExitContextOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericExitContextOp :: Generic (ExitContextOp a) _
derive instance newtypeExitContextOp :: Newtype (ExitContextOp a) _
--------------------------------------------------------------------------------
_ExitContextOp :: forall a. Iso' (ExitContextOp a) { leavingCtx :: Ctx
                                                   , returningToCtx :: Ctx }
_ExitContextOp = _Newtype
--------------------------------------------------------------------------------
newtype CallOp a
  = CallOp
      { dest :: CallDest a
      , name :: Maybe String
      , params :: Array a
      }


instance showCallOp :: (Show a) => Show (CallOp a) where
  show x = genericShow x
derive instance eqCallOp :: (Eq a) => Eq (CallOp a)
derive instance ordCallOp :: (Ord a) => Ord (CallOp a)
instance encodeCallOp :: (Encode a) => Encode (CallOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCallOp :: (Decode a) => Decode (CallOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCallOp :: Generic (CallOp a) _
derive instance newtypeCallOp :: Newtype (CallOp a) _
--------------------------------------------------------------------------------
_CallOp :: forall a. Iso' (CallOp a) { dest :: CallDest a
                                     , name :: Maybe String
                                     , params :: Array a }
_CallOp = _Newtype
--------------------------------------------------------------------------------
newtype DefPhiOp a
  = DefPhiOp
      { dest :: PilVar
      , src :: Array PilVar
      }


instance showDefPhiOp :: Show (DefPhiOp a) where
  show x = genericShow x
derive instance eqDefPhiOp :: Eq (DefPhiOp a)
derive instance ordDefPhiOp :: Ord (DefPhiOp a)
instance encodeDefPhiOp :: Encode (DefPhiOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeDefPhiOp :: Decode (DefPhiOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericDefPhiOp :: Generic (DefPhiOp a) _
derive instance newtypeDefPhiOp :: Newtype (DefPhiOp a) _
--------------------------------------------------------------------------------
_DefPhiOp :: forall a. Iso' (DefPhiOp a) { dest :: PilVar, src :: Array PilVar }
_DefPhiOp = _Newtype
--------------------------------------------------------------------------------
data CallDest a
  = CallConstPtr (ConstPtrOp a)
  | CallExpr a
  | CallExprs (Array a)


instance showCallDest :: (Show a) => Show (CallDest a) where
  show x = genericShow x
derive instance eqCallDest :: (Eq a) => Eq (CallDest a)
derive instance ordCallDest :: (Ord a) => Ord (CallDest a)
instance encodeCallDest :: (Encode a) => Encode (CallDest a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCallDest :: (Decode a) => Decode (CallDest a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCallDest :: Generic (CallDest a) _
--------------------------------------------------------------------------------
_CallConstPtr :: forall a. Prism' (CallDest a) (ConstPtrOp a)
_CallConstPtr = prism' CallConstPtr f
  where
    f (CallConstPtr a) = Just $ a
    f _ = Nothing

_CallExpr :: forall a. Prism' (CallDest a) a
_CallExpr = prism' CallExpr f
  where
    f (CallExpr a) = Just $ a
    f _ = Nothing

_CallExprs :: forall a. Prism' (CallDest a) (Array a)
_CallExprs = prism' CallExprs f
  where
    f (CallExprs a) = Just $ a
    f _ = Nothing
--------------------------------------------------------------------------------
data ExprOp a
  = ADC (AdcOp a)
  | ADD (AddOp a)
  | ADD_OVERFLOW (AddOverflowOp a)
  | AND (AndOp a)
  | ASR (AsrOp a)
  | BOOL_TO_INT (BoolToIntOp a)
  | CEIL (CeilOp a)
  | CMP_E (CmpEOp a)
  | CMP_NE (CmpNeOp a)
  | CMP_SGE (CmpSgeOp a)
  | CMP_SGT (CmpSgtOp a)
  | CMP_SLE (CmpSleOp a)
  | CMP_SLT (CmpSltOp a)
  | CMP_UGE (CmpUgeOp a)
  | CMP_UGT (CmpUgtOp a)
  | CMP_ULE (CmpUleOp a)
  | CMP_ULT (CmpUltOp a)
  | CONST (ConstOp a)
  | CONST_PTR (ConstPtrOp a)
  | CONST_FLOAT (ConstFloatOp a)
  | DIVS (DivsOp a)
  | DIVS_DP (DivsDpOp a)
  | DIVU (DivuOp a)
  | DIVU_DP (DivuDpOp a)
  | FABS (FabsOp a)
  | FADD (FaddOp a)
  | FCMP_E (FcmpEOp a)
  | FCMP_GE (FcmpGeOp a)
  | FCMP_GT (FcmpGtOp a)
  | FCMP_LE (FcmpLeOp a)
  | FCMP_LT (FcmpLtOp a)
  | FCMP_NE (FcmpNeOp a)
  | FCMP_O (FcmpOOp a)
  | FCMP_UO (FcmpUoOp a)
  | FDIV (FdivOp a)
  | FLOAT_CONV (FloatConvOp a)
  | FLOAT_TO_INT (FloatToIntOp a)
  | FLOOR (FloorOp a)
  | FMUL (FmulOp a)
  | FNEG (FnegOp a)
  | FSQRT (FsqrtOp a)
  | FSUB (FsubOp a)
  | FTRUNC (FtruncOp a)
  | IMPORT (ImportOp a)
  | INT_TO_FLOAT (IntToFloatOp a)
  | LOAD (LoadOp a)
  | LOW_PART (LowPartOp a)
  | LSL (LslOp a)
  | LSR (LsrOp a)
  | MODS (ModsOp a)
  | MODS_DP (ModsDpOp a)
  | MODU (ModuOp a)
  | MODU_DP (ModuDpOp a)
  | MUL (MulOp a)
  | MULS_DP (MulsDpOp a)
  | MULU_DP (MuluDpOp a)
  | NEG (NegOp a)
  | NOT (NotOp a)
  | OR (OrOp a)
  | RLC (RlcOp a)
  | ROL (RolOp a)
  | ROR (RorOp a)
  | ROUND_TO_INT (RoundToIntOp a)
  | RRC (RrcOp a)
  | SBB (SbbOp a)
  | SUB (SubOp a)
  | SX (SxOp a)
  | TEST_BIT (TestBitOp a)
  | UNIMPL String
  | VAR_PHI (VarPhiOp a)
  | VAR_JOIN (VarJoinOp a)
  | VAR (VarOp a)
  | VAR_FIELD (VarFieldOp a)
  | XOR (XorOp a)
  | ZX (ZxOp a)
  | CALL (CallOp a)
  | Extract (ExtractOp a)
  | StrCmp (StrCmpOp a)
  | StrNCmp (StrNCmpOp a)
  | MemCmp (MemCmpOp a)
  | ConstStr (ConstStrOp a)
  | STACK_LOCAL_ADDR (StackLocalAddrOp a)
  | UPDATE_VAR (UpdateVarOp a)
  | FIELD_ADDR (FieldAddrOp a)
  | CONST_BOOL (ConstBoolOp a)


instance showExprOp :: (Show a) => Show (ExprOp a) where
  show x = genericShow x
derive instance eqExprOp :: (Eq a) => Eq (ExprOp a)
derive instance ordExprOp :: (Ord a) => Ord (ExprOp a)
instance encodeExprOp :: (Encode a) => Encode (ExprOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeExprOp :: (Decode a) => Decode (ExprOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericExprOp :: Generic (ExprOp a) _
--------------------------------------------------------------------------------
_ADC :: forall a. Prism' (ExprOp a) (AdcOp a)
_ADC = prism' ADC f
  where
    f (ADC a) = Just $ a
    f _ = Nothing

_ADD :: forall a. Prism' (ExprOp a) (AddOp a)
_ADD = prism' ADD f
  where
    f (ADD a) = Just $ a
    f _ = Nothing

_ADD_OVERFLOW :: forall a. Prism' (ExprOp a) (AddOverflowOp a)
_ADD_OVERFLOW = prism' ADD_OVERFLOW f
  where
    f (ADD_OVERFLOW a) = Just $ a
    f _ = Nothing

_AND :: forall a. Prism' (ExprOp a) (AndOp a)
_AND = prism' AND f
  where
    f (AND a) = Just $ a
    f _ = Nothing

_ASR :: forall a. Prism' (ExprOp a) (AsrOp a)
_ASR = prism' ASR f
  where
    f (ASR a) = Just $ a
    f _ = Nothing

_BOOL_TO_INT :: forall a. Prism' (ExprOp a) (BoolToIntOp a)
_BOOL_TO_INT = prism' BOOL_TO_INT f
  where
    f (BOOL_TO_INT a) = Just $ a
    f _ = Nothing

_CEIL :: forall a. Prism' (ExprOp a) (CeilOp a)
_CEIL = prism' CEIL f
  where
    f (CEIL a) = Just $ a
    f _ = Nothing

_CMP_E :: forall a. Prism' (ExprOp a) (CmpEOp a)
_CMP_E = prism' CMP_E f
  where
    f (CMP_E a) = Just $ a
    f _ = Nothing

_CMP_NE :: forall a. Prism' (ExprOp a) (CmpNeOp a)
_CMP_NE = prism' CMP_NE f
  where
    f (CMP_NE a) = Just $ a
    f _ = Nothing

_CMP_SGE :: forall a. Prism' (ExprOp a) (CmpSgeOp a)
_CMP_SGE = prism' CMP_SGE f
  where
    f (CMP_SGE a) = Just $ a
    f _ = Nothing

_CMP_SGT :: forall a. Prism' (ExprOp a) (CmpSgtOp a)
_CMP_SGT = prism' CMP_SGT f
  where
    f (CMP_SGT a) = Just $ a
    f _ = Nothing

_CMP_SLE :: forall a. Prism' (ExprOp a) (CmpSleOp a)
_CMP_SLE = prism' CMP_SLE f
  where
    f (CMP_SLE a) = Just $ a
    f _ = Nothing

_CMP_SLT :: forall a. Prism' (ExprOp a) (CmpSltOp a)
_CMP_SLT = prism' CMP_SLT f
  where
    f (CMP_SLT a) = Just $ a
    f _ = Nothing

_CMP_UGE :: forall a. Prism' (ExprOp a) (CmpUgeOp a)
_CMP_UGE = prism' CMP_UGE f
  where
    f (CMP_UGE a) = Just $ a
    f _ = Nothing

_CMP_UGT :: forall a. Prism' (ExprOp a) (CmpUgtOp a)
_CMP_UGT = prism' CMP_UGT f
  where
    f (CMP_UGT a) = Just $ a
    f _ = Nothing

_CMP_ULE :: forall a. Prism' (ExprOp a) (CmpUleOp a)
_CMP_ULE = prism' CMP_ULE f
  where
    f (CMP_ULE a) = Just $ a
    f _ = Nothing

_CMP_ULT :: forall a. Prism' (ExprOp a) (CmpUltOp a)
_CMP_ULT = prism' CMP_ULT f
  where
    f (CMP_ULT a) = Just $ a
    f _ = Nothing

_CONST :: forall a. Prism' (ExprOp a) (ConstOp a)
_CONST = prism' CONST f
  where
    f (CONST a) = Just $ a
    f _ = Nothing

_CONST_PTR :: forall a. Prism' (ExprOp a) (ConstPtrOp a)
_CONST_PTR = prism' CONST_PTR f
  where
    f (CONST_PTR a) = Just $ a
    f _ = Nothing

_CONST_FLOAT :: forall a. Prism' (ExprOp a) (ConstFloatOp a)
_CONST_FLOAT = prism' CONST_FLOAT f
  where
    f (CONST_FLOAT a) = Just $ a
    f _ = Nothing

_DIVS :: forall a. Prism' (ExprOp a) (DivsOp a)
_DIVS = prism' DIVS f
  where
    f (DIVS a) = Just $ a
    f _ = Nothing

_DIVS_DP :: forall a. Prism' (ExprOp a) (DivsDpOp a)
_DIVS_DP = prism' DIVS_DP f
  where
    f (DIVS_DP a) = Just $ a
    f _ = Nothing

_DIVU :: forall a. Prism' (ExprOp a) (DivuOp a)
_DIVU = prism' DIVU f
  where
    f (DIVU a) = Just $ a
    f _ = Nothing

_DIVU_DP :: forall a. Prism' (ExprOp a) (DivuDpOp a)
_DIVU_DP = prism' DIVU_DP f
  where
    f (DIVU_DP a) = Just $ a
    f _ = Nothing

_FABS :: forall a. Prism' (ExprOp a) (FabsOp a)
_FABS = prism' FABS f
  where
    f (FABS a) = Just $ a
    f _ = Nothing

_FADD :: forall a. Prism' (ExprOp a) (FaddOp a)
_FADD = prism' FADD f
  where
    f (FADD a) = Just $ a
    f _ = Nothing

_FCMP_E :: forall a. Prism' (ExprOp a) (FcmpEOp a)
_FCMP_E = prism' FCMP_E f
  where
    f (FCMP_E a) = Just $ a
    f _ = Nothing

_FCMP_GE :: forall a. Prism' (ExprOp a) (FcmpGeOp a)
_FCMP_GE = prism' FCMP_GE f
  where
    f (FCMP_GE a) = Just $ a
    f _ = Nothing

_FCMP_GT :: forall a. Prism' (ExprOp a) (FcmpGtOp a)
_FCMP_GT = prism' FCMP_GT f
  where
    f (FCMP_GT a) = Just $ a
    f _ = Nothing

_FCMP_LE :: forall a. Prism' (ExprOp a) (FcmpLeOp a)
_FCMP_LE = prism' FCMP_LE f
  where
    f (FCMP_LE a) = Just $ a
    f _ = Nothing

_FCMP_LT :: forall a. Prism' (ExprOp a) (FcmpLtOp a)
_FCMP_LT = prism' FCMP_LT f
  where
    f (FCMP_LT a) = Just $ a
    f _ = Nothing

_FCMP_NE :: forall a. Prism' (ExprOp a) (FcmpNeOp a)
_FCMP_NE = prism' FCMP_NE f
  where
    f (FCMP_NE a) = Just $ a
    f _ = Nothing

_FCMP_O :: forall a. Prism' (ExprOp a) (FcmpOOp a)
_FCMP_O = prism' FCMP_O f
  where
    f (FCMP_O a) = Just $ a
    f _ = Nothing

_FCMP_UO :: forall a. Prism' (ExprOp a) (FcmpUoOp a)
_FCMP_UO = prism' FCMP_UO f
  where
    f (FCMP_UO a) = Just $ a
    f _ = Nothing

_FDIV :: forall a. Prism' (ExprOp a) (FdivOp a)
_FDIV = prism' FDIV f
  where
    f (FDIV a) = Just $ a
    f _ = Nothing

_FLOAT_CONV :: forall a. Prism' (ExprOp a) (FloatConvOp a)
_FLOAT_CONV = prism' FLOAT_CONV f
  where
    f (FLOAT_CONV a) = Just $ a
    f _ = Nothing

_FLOAT_TO_INT :: forall a. Prism' (ExprOp a) (FloatToIntOp a)
_FLOAT_TO_INT = prism' FLOAT_TO_INT f
  where
    f (FLOAT_TO_INT a) = Just $ a
    f _ = Nothing

_FLOOR :: forall a. Prism' (ExprOp a) (FloorOp a)
_FLOOR = prism' FLOOR f
  where
    f (FLOOR a) = Just $ a
    f _ = Nothing

_FMUL :: forall a. Prism' (ExprOp a) (FmulOp a)
_FMUL = prism' FMUL f
  where
    f (FMUL a) = Just $ a
    f _ = Nothing

_FNEG :: forall a. Prism' (ExprOp a) (FnegOp a)
_FNEG = prism' FNEG f
  where
    f (FNEG a) = Just $ a
    f _ = Nothing

_FSQRT :: forall a. Prism' (ExprOp a) (FsqrtOp a)
_FSQRT = prism' FSQRT f
  where
    f (FSQRT a) = Just $ a
    f _ = Nothing

_FSUB :: forall a. Prism' (ExprOp a) (FsubOp a)
_FSUB = prism' FSUB f
  where
    f (FSUB a) = Just $ a
    f _ = Nothing

_FTRUNC :: forall a. Prism' (ExprOp a) (FtruncOp a)
_FTRUNC = prism' FTRUNC f
  where
    f (FTRUNC a) = Just $ a
    f _ = Nothing

_IMPORT :: forall a. Prism' (ExprOp a) (ImportOp a)
_IMPORT = prism' IMPORT f
  where
    f (IMPORT a) = Just $ a
    f _ = Nothing

_INT_TO_FLOAT :: forall a. Prism' (ExprOp a) (IntToFloatOp a)
_INT_TO_FLOAT = prism' INT_TO_FLOAT f
  where
    f (INT_TO_FLOAT a) = Just $ a
    f _ = Nothing

_LOAD :: forall a. Prism' (ExprOp a) (LoadOp a)
_LOAD = prism' LOAD f
  where
    f (LOAD a) = Just $ a
    f _ = Nothing

_LOW_PART :: forall a. Prism' (ExprOp a) (LowPartOp a)
_LOW_PART = prism' LOW_PART f
  where
    f (LOW_PART a) = Just $ a
    f _ = Nothing

_LSL :: forall a. Prism' (ExprOp a) (LslOp a)
_LSL = prism' LSL f
  where
    f (LSL a) = Just $ a
    f _ = Nothing

_LSR :: forall a. Prism' (ExprOp a) (LsrOp a)
_LSR = prism' LSR f
  where
    f (LSR a) = Just $ a
    f _ = Nothing

_MODS :: forall a. Prism' (ExprOp a) (ModsOp a)
_MODS = prism' MODS f
  where
    f (MODS a) = Just $ a
    f _ = Nothing

_MODS_DP :: forall a. Prism' (ExprOp a) (ModsDpOp a)
_MODS_DP = prism' MODS_DP f
  where
    f (MODS_DP a) = Just $ a
    f _ = Nothing

_MODU :: forall a. Prism' (ExprOp a) (ModuOp a)
_MODU = prism' MODU f
  where
    f (MODU a) = Just $ a
    f _ = Nothing

_MODU_DP :: forall a. Prism' (ExprOp a) (ModuDpOp a)
_MODU_DP = prism' MODU_DP f
  where
    f (MODU_DP a) = Just $ a
    f _ = Nothing

_MUL :: forall a. Prism' (ExprOp a) (MulOp a)
_MUL = prism' MUL f
  where
    f (MUL a) = Just $ a
    f _ = Nothing

_MULS_DP :: forall a. Prism' (ExprOp a) (MulsDpOp a)
_MULS_DP = prism' MULS_DP f
  where
    f (MULS_DP a) = Just $ a
    f _ = Nothing

_MULU_DP :: forall a. Prism' (ExprOp a) (MuluDpOp a)
_MULU_DP = prism' MULU_DP f
  where
    f (MULU_DP a) = Just $ a
    f _ = Nothing

_NEG :: forall a. Prism' (ExprOp a) (NegOp a)
_NEG = prism' NEG f
  where
    f (NEG a) = Just $ a
    f _ = Nothing

_NOT :: forall a. Prism' (ExprOp a) (NotOp a)
_NOT = prism' NOT f
  where
    f (NOT a) = Just $ a
    f _ = Nothing

_OR :: forall a. Prism' (ExprOp a) (OrOp a)
_OR = prism' OR f
  where
    f (OR a) = Just $ a
    f _ = Nothing

_RLC :: forall a. Prism' (ExprOp a) (RlcOp a)
_RLC = prism' RLC f
  where
    f (RLC a) = Just $ a
    f _ = Nothing

_ROL :: forall a. Prism' (ExprOp a) (RolOp a)
_ROL = prism' ROL f
  where
    f (ROL a) = Just $ a
    f _ = Nothing

_ROR :: forall a. Prism' (ExprOp a) (RorOp a)
_ROR = prism' ROR f
  where
    f (ROR a) = Just $ a
    f _ = Nothing

_ROUND_TO_INT :: forall a. Prism' (ExprOp a) (RoundToIntOp a)
_ROUND_TO_INT = prism' ROUND_TO_INT f
  where
    f (ROUND_TO_INT a) = Just $ a
    f _ = Nothing

_RRC :: forall a. Prism' (ExprOp a) (RrcOp a)
_RRC = prism' RRC f
  where
    f (RRC a) = Just $ a
    f _ = Nothing

_SBB :: forall a. Prism' (ExprOp a) (SbbOp a)
_SBB = prism' SBB f
  where
    f (SBB a) = Just $ a
    f _ = Nothing

_SUB :: forall a. Prism' (ExprOp a) (SubOp a)
_SUB = prism' SUB f
  where
    f (SUB a) = Just $ a
    f _ = Nothing

_SX :: forall a. Prism' (ExprOp a) (SxOp a)
_SX = prism' SX f
  where
    f (SX a) = Just $ a
    f _ = Nothing

_TEST_BIT :: forall a. Prism' (ExprOp a) (TestBitOp a)
_TEST_BIT = prism' TEST_BIT f
  where
    f (TEST_BIT a) = Just $ a
    f _ = Nothing

_UNIMPL :: forall a. Prism' (ExprOp a) String
_UNIMPL = prism' UNIMPL f
  where
    f (UNIMPL a) = Just $ a
    f _ = Nothing

_VAR_PHI :: forall a. Prism' (ExprOp a) (VarPhiOp a)
_VAR_PHI = prism' VAR_PHI f
  where
    f (VAR_PHI a) = Just $ a
    f _ = Nothing

_VAR_JOIN :: forall a. Prism' (ExprOp a) (VarJoinOp a)
_VAR_JOIN = prism' VAR_JOIN f
  where
    f (VAR_JOIN a) = Just $ a
    f _ = Nothing

_VAR :: forall a. Prism' (ExprOp a) (VarOp a)
_VAR = prism' VAR f
  where
    f (VAR a) = Just $ a
    f _ = Nothing

_VAR_FIELD :: forall a. Prism' (ExprOp a) (VarFieldOp a)
_VAR_FIELD = prism' VAR_FIELD f
  where
    f (VAR_FIELD a) = Just $ a
    f _ = Nothing

_XOR :: forall a. Prism' (ExprOp a) (XorOp a)
_XOR = prism' XOR f
  where
    f (XOR a) = Just $ a
    f _ = Nothing

_ZX :: forall a. Prism' (ExprOp a) (ZxOp a)
_ZX = prism' ZX f
  where
    f (ZX a) = Just $ a
    f _ = Nothing

_CALL :: forall a. Prism' (ExprOp a) (CallOp a)
_CALL = prism' CALL f
  where
    f (CALL a) = Just $ a
    f _ = Nothing

_Extract :: forall a. Prism' (ExprOp a) (ExtractOp a)
_Extract = prism' Extract f
  where
    f (Extract a) = Just $ a
    f _ = Nothing

_StrCmp :: forall a. Prism' (ExprOp a) (StrCmpOp a)
_StrCmp = prism' StrCmp f
  where
    f (StrCmp a) = Just $ a
    f _ = Nothing

_StrNCmp :: forall a. Prism' (ExprOp a) (StrNCmpOp a)
_StrNCmp = prism' StrNCmp f
  where
    f (StrNCmp a) = Just $ a
    f _ = Nothing

_MemCmp :: forall a. Prism' (ExprOp a) (MemCmpOp a)
_MemCmp = prism' MemCmp f
  where
    f (MemCmp a) = Just $ a
    f _ = Nothing

_ConstStr :: forall a. Prism' (ExprOp a) (ConstStrOp a)
_ConstStr = prism' ConstStr f
  where
    f (ConstStr a) = Just $ a
    f _ = Nothing

_STACK_LOCAL_ADDR :: forall a. Prism' (ExprOp a) (StackLocalAddrOp a)
_STACK_LOCAL_ADDR = prism' STACK_LOCAL_ADDR f
  where
    f (STACK_LOCAL_ADDR a) = Just $ a
    f _ = Nothing

_UPDATE_VAR :: forall a. Prism' (ExprOp a) (UpdateVarOp a)
_UPDATE_VAR = prism' UPDATE_VAR f
  where
    f (UPDATE_VAR a) = Just $ a
    f _ = Nothing

_FIELD_ADDR :: forall a. Prism' (ExprOp a) (FieldAddrOp a)
_FIELD_ADDR = prism' FIELD_ADDR f
  where
    f (FIELD_ADDR a) = Just $ a
    f _ = Nothing

_CONST_BOOL :: forall a. Prism' (ExprOp a) (ConstBoolOp a)
_CONST_BOOL = prism' CONST_BOOL f
  where
    f (CONST_BOOL a) = Just $ a
    f _ = Nothing
--------------------------------------------------------------------------------
newtype VarPhiOp a
  = VarPhiOp
      { dest :: PilVar
      , src :: Array PilVar
      }


instance showVarPhiOp :: Show (VarPhiOp a) where
  show x = genericShow x
derive instance eqVarPhiOp :: Eq (VarPhiOp a)
derive instance ordVarPhiOp :: Ord (VarPhiOp a)
instance encodeVarPhiOp :: Encode (VarPhiOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeVarPhiOp :: Decode (VarPhiOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericVarPhiOp :: Generic (VarPhiOp a) _
derive instance newtypeVarPhiOp :: Newtype (VarPhiOp a) _
--------------------------------------------------------------------------------
_VarPhiOp :: forall a. Iso' (VarPhiOp a) { dest :: PilVar, src :: Array PilVar }
_VarPhiOp = _Newtype
--------------------------------------------------------------------------------
newtype VarJoinOp a
  = VarJoinOp
      { high :: PilVar
      , low :: PilVar
      }


instance showVarJoinOp :: Show (VarJoinOp a) where
  show x = genericShow x
derive instance eqVarJoinOp :: Eq (VarJoinOp a)
derive instance ordVarJoinOp :: Ord (VarJoinOp a)
instance encodeVarJoinOp :: Encode (VarJoinOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeVarJoinOp :: Decode (VarJoinOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericVarJoinOp :: Generic (VarJoinOp a) _
derive instance newtypeVarJoinOp :: Newtype (VarJoinOp a) _
--------------------------------------------------------------------------------
_VarJoinOp :: forall a. Iso' (VarJoinOp a) { high :: PilVar, low :: PilVar }
_VarJoinOp = _Newtype
--------------------------------------------------------------------------------
newtype VarOp a
  = VarOp
      { src :: PilVar
      }


instance showVarOp :: Show (VarOp a) where
  show x = genericShow x
derive instance eqVarOp :: Eq (VarOp a)
derive instance ordVarOp :: Ord (VarOp a)
instance encodeVarOp :: Encode (VarOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeVarOp :: Decode (VarOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericVarOp :: Generic (VarOp a) _
derive instance newtypeVarOp :: Newtype (VarOp a) _
--------------------------------------------------------------------------------
_VarOp :: forall a. Iso' (VarOp a) { src :: PilVar }
_VarOp = _Newtype
--------------------------------------------------------------------------------
newtype VarFieldOp a
  = VarFieldOp
      { src :: PilVar
      , offset :: ByteOffset
      }


instance showVarFieldOp :: Show (VarFieldOp a) where
  show x = genericShow x
derive instance eqVarFieldOp :: Eq (VarFieldOp a)
derive instance ordVarFieldOp :: Ord (VarFieldOp a)
instance encodeVarFieldOp :: Encode (VarFieldOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeVarFieldOp :: Decode (VarFieldOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericVarFieldOp :: Generic (VarFieldOp a) _
derive instance newtypeVarFieldOp :: Newtype (VarFieldOp a) _
--------------------------------------------------------------------------------
_VarFieldOp :: forall a. Iso' (VarFieldOp a) { src :: PilVar
                                             , offset :: ByteOffset }
_VarFieldOp = _Newtype
--------------------------------------------------------------------------------
newtype ExtractOp a
  = ExtractOp
      { src :: a
      , offset :: Int64
      }


instance showExtractOp :: (Show a) => Show (ExtractOp a) where
  show x = genericShow x
derive instance eqExtractOp :: (Eq a) => Eq (ExtractOp a)
derive instance ordExtractOp :: (Ord a) => Ord (ExtractOp a)
instance encodeExtractOp :: (Encode a) => Encode (ExtractOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeExtractOp :: (Decode a) => Decode (ExtractOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericExtractOp :: Generic (ExtractOp a) _
derive instance newtypeExtractOp :: Newtype (ExtractOp a) _
--------------------------------------------------------------------------------
_ExtractOp :: forall a. Iso' (ExtractOp a) { src :: a, offset :: Int64 }
_ExtractOp = _Newtype
--------------------------------------------------------------------------------
newtype StrCmpOp a
  = StrCmpOp
      { left :: a
      , right :: a
      }


instance showStrCmpOp :: (Show a) => Show (StrCmpOp a) where
  show x = genericShow x
derive instance eqStrCmpOp :: (Eq a) => Eq (StrCmpOp a)
derive instance ordStrCmpOp :: (Ord a) => Ord (StrCmpOp a)
instance encodeStrCmpOp :: (Encode a) => Encode (StrCmpOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeStrCmpOp :: (Decode a) => Decode (StrCmpOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericStrCmpOp :: Generic (StrCmpOp a) _
derive instance newtypeStrCmpOp :: Newtype (StrCmpOp a) _
--------------------------------------------------------------------------------
_StrCmpOp :: forall a. Iso' (StrCmpOp a) { left :: a, right :: a }
_StrCmpOp = _Newtype
--------------------------------------------------------------------------------
newtype StrNCmpOp a
  = StrNCmpOp
      { left :: a
      , right :: a
      , len :: Int
      }


instance showStrNCmpOp :: (Show a) => Show (StrNCmpOp a) where
  show x = genericShow x
derive instance eqStrNCmpOp :: (Eq a) => Eq (StrNCmpOp a)
derive instance ordStrNCmpOp :: (Ord a) => Ord (StrNCmpOp a)
instance encodeStrNCmpOp :: (Encode a) => Encode (StrNCmpOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeStrNCmpOp :: (Decode a) => Decode (StrNCmpOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericStrNCmpOp :: Generic (StrNCmpOp a) _
derive instance newtypeStrNCmpOp :: Newtype (StrNCmpOp a) _
--------------------------------------------------------------------------------
_StrNCmpOp :: forall a. Iso' (StrNCmpOp a) { left :: a, right :: a, len :: Int }
_StrNCmpOp = _Newtype
--------------------------------------------------------------------------------
newtype MemCmpOp a
  = MemCmpOp
      { left :: a
      , right :: a
      , size :: Bytes
      }


instance showMemCmpOp :: (Show a) => Show (MemCmpOp a) where
  show x = genericShow x
derive instance eqMemCmpOp :: (Eq a) => Eq (MemCmpOp a)
derive instance ordMemCmpOp :: (Ord a) => Ord (MemCmpOp a)
instance encodeMemCmpOp :: (Encode a) => Encode (MemCmpOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeMemCmpOp :: (Decode a) => Decode (MemCmpOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericMemCmpOp :: Generic (MemCmpOp a) _
derive instance newtypeMemCmpOp :: Newtype (MemCmpOp a) _
--------------------------------------------------------------------------------
_MemCmpOp :: forall a. Iso' (MemCmpOp a) { left :: a
                                         , right :: a
                                         , size :: Bytes }
_MemCmpOp = _Newtype
--------------------------------------------------------------------------------
newtype ConstStrOp a
  = ConstStrOp
      { value :: String
      }


instance showConstStrOp :: Show (ConstStrOp a) where
  show x = genericShow x
derive instance eqConstStrOp :: Eq (ConstStrOp a)
derive instance ordConstStrOp :: Ord (ConstStrOp a)
instance encodeConstStrOp :: Encode (ConstStrOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeConstStrOp :: Decode (ConstStrOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericConstStrOp :: Generic (ConstStrOp a) _
derive instance newtypeConstStrOp :: Newtype (ConstStrOp a) _
--------------------------------------------------------------------------------
_ConstStrOp :: forall a. Iso' (ConstStrOp a) { value :: String }
_ConstStrOp = _Newtype
--------------------------------------------------------------------------------
newtype StackLocalAddrOp a
  = StackLocalAddrOp
      { stackOffset :: StackOffset
      }


instance showStackLocalAddrOp :: Show (StackLocalAddrOp a) where
  show x = genericShow x
derive instance eqStackLocalAddrOp :: Eq (StackLocalAddrOp a)
derive instance ordStackLocalAddrOp :: Ord (StackLocalAddrOp a)
instance encodeStackLocalAddrOp :: Encode (StackLocalAddrOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeStackLocalAddrOp :: Decode (StackLocalAddrOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericStackLocalAddrOp :: Generic (StackLocalAddrOp a) _
derive instance newtypeStackLocalAddrOp :: Newtype (StackLocalAddrOp a) _
--------------------------------------------------------------------------------
_StackLocalAddrOp :: forall a. Iso' (StackLocalAddrOp a) { stackOffset :: StackOffset }
_StackLocalAddrOp = _Newtype
--------------------------------------------------------------------------------
newtype UpdateVarOp a
  = UpdateVarOp
      { dest :: PilVar
      , offset :: ByteOffset
      , src :: a
      }


instance showUpdateVarOp :: (Show a) => Show (UpdateVarOp a) where
  show x = genericShow x
derive instance eqUpdateVarOp :: (Eq a) => Eq (UpdateVarOp a)
derive instance ordUpdateVarOp :: (Ord a) => Ord (UpdateVarOp a)
instance encodeUpdateVarOp :: (Encode a) => Encode (UpdateVarOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeUpdateVarOp :: (Decode a) => Decode (UpdateVarOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericUpdateVarOp :: Generic (UpdateVarOp a) _
derive instance newtypeUpdateVarOp :: Newtype (UpdateVarOp a) _
--------------------------------------------------------------------------------
_UpdateVarOp :: forall a. Iso' (UpdateVarOp a) { dest :: PilVar
                                               , offset :: ByteOffset
                                               , src :: a }
_UpdateVarOp = _Newtype
--------------------------------------------------------------------------------
newtype FieldAddrOp a
  = FieldAddrOp
      { baseAddr :: a
      , offset :: ByteOffset
      }


instance showFieldAddrOp :: (Show a) => Show (FieldAddrOp a) where
  show x = genericShow x
derive instance eqFieldAddrOp :: (Eq a) => Eq (FieldAddrOp a)
derive instance ordFieldAddrOp :: (Ord a) => Ord (FieldAddrOp a)
instance encodeFieldAddrOp :: (Encode a) => Encode (FieldAddrOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFieldAddrOp :: (Decode a) => Decode (FieldAddrOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFieldAddrOp :: Generic (FieldAddrOp a) _
derive instance newtypeFieldAddrOp :: Newtype (FieldAddrOp a) _
--------------------------------------------------------------------------------
_FieldAddrOp :: forall a. Iso' (FieldAddrOp a) { baseAddr :: a
                                               , offset :: ByteOffset }
_FieldAddrOp = _Newtype
--------------------------------------------------------------------------------
newtype ConstBoolOp a
  = ConstBoolOp
      { constant :: Boolean
      }


instance showConstBoolOp :: Show (ConstBoolOp a) where
  show x = genericShow x
derive instance eqConstBoolOp :: Eq (ConstBoolOp a)
derive instance ordConstBoolOp :: Ord (ConstBoolOp a)
instance encodeConstBoolOp :: Encode (ConstBoolOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeConstBoolOp :: Decode (ConstBoolOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericConstBoolOp :: Generic (ConstBoolOp a) _
derive instance newtypeConstBoolOp :: Newtype (ConstBoolOp a) _
--------------------------------------------------------------------------------
_ConstBoolOp :: forall a. Iso' (ConstBoolOp a) { constant :: Boolean }
_ConstBoolOp = _Newtype
--------------------------------------------------------------------------------
