-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.ModsDpOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype ModsDpOp a
  = ModsDpOp
      { left :: a
      , right :: a
      }


instance showModsDpOp :: (Show a) => Show (ModsDpOp a) where
  show x = genericShow x
derive instance eqModsDpOp :: (Eq a) => Eq (ModsDpOp a)
derive instance ordModsDpOp :: (Ord a) => Ord (ModsDpOp a)
instance encodeModsDpOp :: (Encode a) => Encode (ModsDpOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeModsDpOp :: (Decode a) => Decode (ModsDpOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericModsDpOp :: Generic (ModsDpOp a) _
derive instance newtypeModsDpOp :: Newtype (ModsDpOp a) _
--------------------------------------------------------------------------------
_ModsDpOp :: forall a. Iso' (ModsDpOp a) { left :: a, right :: a }
_ModsDpOp = _Newtype
--------------------------------------------------------------------------------
