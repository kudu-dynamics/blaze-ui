-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FnegOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FnegOp a
  = FnegOp
      { src :: a
      }


instance showFnegOp :: (Show a) => Show (FnegOp a) where
  show x = genericShow x
derive instance eqFnegOp :: (Eq a) => Eq (FnegOp a)
derive instance ordFnegOp :: (Ord a) => Ord (FnegOp a)
instance encodeFnegOp :: (Encode a) => Encode (FnegOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFnegOp :: (Decode a) => Decode (FnegOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFnegOp :: Generic (FnegOp a) _
derive instance newtypeFnegOp :: Newtype (FnegOp a) _
--------------------------------------------------------------------------------
_FnegOp :: forall a. Iso' (FnegOp a) { src :: a }
_FnegOp = _Newtype
--------------------------------------------------------------------------------
