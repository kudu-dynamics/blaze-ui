-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.LslOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype LslOp a
  = LslOp
      { left :: a
      , right :: a
      }


instance showLslOp :: (Show a) => Show (LslOp a) where
  show x = genericShow x
derive instance eqLslOp :: (Eq a) => Eq (LslOp a)
derive instance ordLslOp :: (Ord a) => Ord (LslOp a)
instance encodeLslOp :: (Encode a) => Encode (LslOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeLslOp :: (Decode a) => Decode (LslOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericLslOp :: Generic (LslOp a) _
derive instance newtypeLslOp :: Newtype (LslOp a) _
--------------------------------------------------------------------------------
_LslOp :: forall a. Iso' (LslOp a) { left :: a, right :: a }
_LslOp = _Newtype
--------------------------------------------------------------------------------
