-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.ModuOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype ModuOp a
  = ModuOp
      { left :: a
      , right :: a
      }


instance showModuOp :: (Show a) => Show (ModuOp a) where
  show x = genericShow x
derive instance eqModuOp :: (Eq a) => Eq (ModuOp a)
derive instance ordModuOp :: (Ord a) => Ord (ModuOp a)
instance encodeModuOp :: (Encode a) => Encode (ModuOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeModuOp :: (Decode a) => Decode (ModuOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericModuOp :: Generic (ModuOp a) _
derive instance newtypeModuOp :: Newtype (ModuOp a) _
--------------------------------------------------------------------------------
_ModuOp :: forall a. Iso' (ModuOp a) { left :: a, right :: a }
_ModuOp = _Newtype
--------------------------------------------------------------------------------
