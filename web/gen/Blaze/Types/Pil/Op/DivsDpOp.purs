-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.DivsDpOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype DivsDpOp a
  = DivsDpOp
      { left :: a
      , right :: a
      }


instance showDivsDpOp :: (Show a) => Show (DivsDpOp a) where
  show x = genericShow x
derive instance eqDivsDpOp :: (Eq a) => Eq (DivsDpOp a)
derive instance ordDivsDpOp :: (Ord a) => Ord (DivsDpOp a)
instance encodeDivsDpOp :: (Encode a) => Encode (DivsDpOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeDivsDpOp :: (Decode a) => Decode (DivsDpOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericDivsDpOp :: Generic (DivsDpOp a) _
derive instance newtypeDivsDpOp :: Newtype (DivsDpOp a) _
--------------------------------------------------------------------------------
_DivsDpOp :: forall a. Iso' (DivsDpOp a) { left :: a, right :: a }
_DivsDpOp = _Newtype
--------------------------------------------------------------------------------
