-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.MuluDpOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype MuluDpOp a
  = MuluDpOp
      { left :: a
      , right :: a
      }


instance showMuluDpOp :: (Show a) => Show (MuluDpOp a) where
  show x = genericShow x
derive instance eqMuluDpOp :: (Eq a) => Eq (MuluDpOp a)
derive instance ordMuluDpOp :: (Ord a) => Ord (MuluDpOp a)
instance encodeMuluDpOp :: (Encode a) => Encode (MuluDpOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeMuluDpOp :: (Decode a) => Decode (MuluDpOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericMuluDpOp :: Generic (MuluDpOp a) _
derive instance newtypeMuluDpOp :: Newtype (MuluDpOp a) _
--------------------------------------------------------------------------------
_MuluDpOp :: forall a. Iso' (MuluDpOp a) { left :: a, right :: a }
_MuluDpOp = _Newtype
--------------------------------------------------------------------------------
