-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FtruncOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FtruncOp a
  = FtruncOp
      { src :: a
      }


instance showFtruncOp :: (Show a) => Show (FtruncOp a) where
  show x = genericShow x
derive instance eqFtruncOp :: (Eq a) => Eq (FtruncOp a)
derive instance ordFtruncOp :: (Ord a) => Ord (FtruncOp a)
instance encodeFtruncOp :: (Encode a) => Encode (FtruncOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFtruncOp :: (Decode a) => Decode (FtruncOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFtruncOp :: Generic (FtruncOp a) _
derive instance newtypeFtruncOp :: Newtype (FtruncOp a) _
--------------------------------------------------------------------------------
_FtruncOp :: forall a. Iso' (FtruncOp a) { src :: a }
_FtruncOp = _Newtype
--------------------------------------------------------------------------------
