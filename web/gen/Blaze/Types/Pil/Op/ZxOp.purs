-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.ZxOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype ZxOp a
  = ZxOp
      { src :: a
      }


instance showZxOp :: (Show a) => Show (ZxOp a) where
  show x = genericShow x
derive instance eqZxOp :: (Eq a) => Eq (ZxOp a)
derive instance ordZxOp :: (Ord a) => Ord (ZxOp a)
instance encodeZxOp :: (Encode a) => Encode (ZxOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeZxOp :: (Decode a) => Decode (ZxOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericZxOp :: Generic (ZxOp a) _
derive instance newtypeZxOp :: Newtype (ZxOp a) _
--------------------------------------------------------------------------------
_ZxOp :: forall a. Iso' (ZxOp a) { src :: a }
_ZxOp = _Newtype
--------------------------------------------------------------------------------
