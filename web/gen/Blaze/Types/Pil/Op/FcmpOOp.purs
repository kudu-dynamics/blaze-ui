-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FcmpOOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FcmpOOp a
  = FcmpOOp
      { left :: a
      , right :: a
      }


instance showFcmpOOp :: (Show a) => Show (FcmpOOp a) where
  show x = genericShow x
derive instance eqFcmpOOp :: (Eq a) => Eq (FcmpOOp a)
derive instance ordFcmpOOp :: (Ord a) => Ord (FcmpOOp a)
instance encodeFcmpOOp :: (Encode a) => Encode (FcmpOOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFcmpOOp :: (Decode a) => Decode (FcmpOOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFcmpOOp :: Generic (FcmpOOp a) _
derive instance newtypeFcmpOOp :: Newtype (FcmpOOp a) _
--------------------------------------------------------------------------------
_FcmpOOp :: forall a. Iso' (FcmpOOp a) { left :: a, right :: a }
_FcmpOOp = _Newtype
--------------------------------------------------------------------------------
