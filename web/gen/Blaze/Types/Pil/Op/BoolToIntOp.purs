-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.BoolToIntOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype BoolToIntOp a
  = BoolToIntOp
      { src :: a
      }


instance showBoolToIntOp :: (Show a) => Show (BoolToIntOp a) where
  show x = genericShow x
derive instance eqBoolToIntOp :: (Eq a) => Eq (BoolToIntOp a)
derive instance ordBoolToIntOp :: (Ord a) => Ord (BoolToIntOp a)
instance encodeBoolToIntOp :: (Encode a) => Encode (BoolToIntOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeBoolToIntOp :: (Decode a) => Decode (BoolToIntOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericBoolToIntOp :: Generic (BoolToIntOp a) _
derive instance newtypeBoolToIntOp :: Newtype (BoolToIntOp a) _
--------------------------------------------------------------------------------
_BoolToIntOp :: forall a. Iso' (BoolToIntOp a) { src :: a }
_BoolToIntOp = _Newtype
--------------------------------------------------------------------------------
