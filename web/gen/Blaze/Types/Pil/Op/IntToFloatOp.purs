-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.IntToFloatOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype IntToFloatOp a
  = IntToFloatOp
      { src :: a
      }


instance showIntToFloatOp :: (Show a) => Show (IntToFloatOp a) where
  show x = genericShow x
derive instance eqIntToFloatOp :: (Eq a) => Eq (IntToFloatOp a)
derive instance ordIntToFloatOp :: (Ord a) => Ord (IntToFloatOp a)
instance encodeIntToFloatOp :: (Encode a) => Encode (IntToFloatOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeIntToFloatOp :: (Decode a) => Decode (IntToFloatOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericIntToFloatOp :: Generic (IntToFloatOp a) _
derive instance newtypeIntToFloatOp :: Newtype (IntToFloatOp a) _
--------------------------------------------------------------------------------
_IntToFloatOp :: forall a. Iso' (IntToFloatOp a) { src :: a }
_IntToFloatOp = _Newtype
--------------------------------------------------------------------------------
