-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.RoundToIntOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype RoundToIntOp a
  = RoundToIntOp
      { src :: a
      }


instance showRoundToIntOp :: (Show a) => Show (RoundToIntOp a) where
  show x = genericShow x
derive instance eqRoundToIntOp :: (Eq a) => Eq (RoundToIntOp a)
derive instance ordRoundToIntOp :: (Ord a) => Ord (RoundToIntOp a)
instance encodeRoundToIntOp :: (Encode a) => Encode (RoundToIntOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeRoundToIntOp :: (Decode a) => Decode (RoundToIntOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericRoundToIntOp :: Generic (RoundToIntOp a) _
derive instance newtypeRoundToIntOp :: Newtype (RoundToIntOp a) _
--------------------------------------------------------------------------------
_RoundToIntOp :: forall a. Iso' (RoundToIntOp a) { src :: a }
_RoundToIntOp = _Newtype
--------------------------------------------------------------------------------
