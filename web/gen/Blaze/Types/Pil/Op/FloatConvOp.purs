-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FloatConvOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FloatConvOp a
  = FloatConvOp
      { src :: a
      }


instance showFloatConvOp :: (Show a) => Show (FloatConvOp a) where
  show x = genericShow x
derive instance eqFloatConvOp :: (Eq a) => Eq (FloatConvOp a)
derive instance ordFloatConvOp :: (Ord a) => Ord (FloatConvOp a)
instance encodeFloatConvOp :: (Encode a) => Encode (FloatConvOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFloatConvOp :: (Decode a) => Decode (FloatConvOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFloatConvOp :: Generic (FloatConvOp a) _
derive instance newtypeFloatConvOp :: Newtype (FloatConvOp a) _
--------------------------------------------------------------------------------
_FloatConvOp :: forall a. Iso' (FloatConvOp a) { src :: a }
_FloatConvOp = _Newtype
--------------------------------------------------------------------------------
