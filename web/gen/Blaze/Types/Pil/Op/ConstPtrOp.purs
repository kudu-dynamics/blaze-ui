-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.ConstPtrOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)
import Prim (Int)

import Prelude

newtype ConstPtrOp a
  = ConstPtrOp
      { constant :: Int
      }


instance showConstPtrOp :: Show (ConstPtrOp a) where
  show x = genericShow x
derive instance eqConstPtrOp :: Eq (ConstPtrOp a)
derive instance ordConstPtrOp :: Ord (ConstPtrOp a)
instance encodeConstPtrOp :: Encode (ConstPtrOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeConstPtrOp :: Decode (ConstPtrOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericConstPtrOp :: Generic (ConstPtrOp a) _
derive instance newtypeConstPtrOp :: Newtype (ConstPtrOp a) _
--------------------------------------------------------------------------------
_ConstPtrOp :: forall a. Iso' (ConstPtrOp a) { constant :: Int }
_ConstPtrOp = _Newtype
--------------------------------------------------------------------------------
