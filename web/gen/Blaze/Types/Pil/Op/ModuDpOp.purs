-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.ModuDpOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype ModuDpOp a
  = ModuDpOp
      { left :: a
      , right :: a
      }


instance showModuDpOp :: (Show a) => Show (ModuDpOp a) where
  show x = genericShow x
derive instance eqModuDpOp :: (Eq a) => Eq (ModuDpOp a)
derive instance ordModuDpOp :: (Ord a) => Ord (ModuDpOp a)
instance encodeModuDpOp :: (Encode a) => Encode (ModuDpOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeModuDpOp :: (Decode a) => Decode (ModuDpOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericModuDpOp :: Generic (ModuDpOp a) _
derive instance newtypeModuDpOp :: Newtype (ModuDpOp a) _
--------------------------------------------------------------------------------
_ModuDpOp :: forall a. Iso' (ModuDpOp a) { left :: a, right :: a }
_ModuDpOp = _Newtype
--------------------------------------------------------------------------------
