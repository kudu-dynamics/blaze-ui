-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.ConstFloatOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)
import Prim (Number)

import Prelude

newtype ConstFloatOp a
  = ConstFloatOp
      { constant :: Number
      }


instance showConstFloatOp :: Show (ConstFloatOp a) where
  show x = genericShow x
derive instance eqConstFloatOp :: Eq (ConstFloatOp a)
derive instance ordConstFloatOp :: Ord (ConstFloatOp a)
instance encodeConstFloatOp :: Encode (ConstFloatOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeConstFloatOp :: Decode (ConstFloatOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericConstFloatOp :: Generic (ConstFloatOp a) _
derive instance newtypeConstFloatOp :: Newtype (ConstFloatOp a) _
--------------------------------------------------------------------------------
_ConstFloatOp :: forall a. Iso' (ConstFloatOp a) { constant :: Number }
_ConstFloatOp = _Newtype
--------------------------------------------------------------------------------
