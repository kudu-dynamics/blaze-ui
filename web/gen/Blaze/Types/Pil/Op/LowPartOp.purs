-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.LowPartOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype LowPartOp a
  = LowPartOp
      { src :: a
      }


instance showLowPartOp :: (Show a) => Show (LowPartOp a) where
  show x = genericShow x
derive instance eqLowPartOp :: (Eq a) => Eq (LowPartOp a)
derive instance ordLowPartOp :: (Ord a) => Ord (LowPartOp a)
instance encodeLowPartOp :: (Encode a) => Encode (LowPartOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeLowPartOp :: (Decode a) => Decode (LowPartOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericLowPartOp :: Generic (LowPartOp a) _
derive instance newtypeLowPartOp :: Newtype (LowPartOp a) _
--------------------------------------------------------------------------------
_LowPartOp :: forall a. Iso' (LowPartOp a) { src :: a }
_LowPartOp = _Newtype
--------------------------------------------------------------------------------
