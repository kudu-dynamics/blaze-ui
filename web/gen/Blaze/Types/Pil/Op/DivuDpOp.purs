-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.DivuDpOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype DivuDpOp a
  = DivuDpOp
      { left :: a
      , right :: a
      }


instance showDivuDpOp :: (Show a) => Show (DivuDpOp a) where
  show x = genericShow x
derive instance eqDivuDpOp :: (Eq a) => Eq (DivuDpOp a)
derive instance ordDivuDpOp :: (Ord a) => Ord (DivuDpOp a)
instance encodeDivuDpOp :: (Encode a) => Encode (DivuDpOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeDivuDpOp :: (Decode a) => Decode (DivuDpOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericDivuDpOp :: Generic (DivuDpOp a) _
derive instance newtypeDivuDpOp :: Newtype (DivuDpOp a) _
--------------------------------------------------------------------------------
_DivuDpOp :: forall a. Iso' (DivuDpOp a) { left :: a, right :: a }
_DivuDpOp = _Newtype
--------------------------------------------------------------------------------
