-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FcmpUoOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FcmpUoOp a
  = FcmpUoOp
      { left :: a
      , right :: a
      }


instance showFcmpUoOp :: (Show a) => Show (FcmpUoOp a) where
  show x = genericShow x
derive instance eqFcmpUoOp :: (Eq a) => Eq (FcmpUoOp a)
derive instance ordFcmpUoOp :: (Ord a) => Ord (FcmpUoOp a)
instance encodeFcmpUoOp :: (Encode a) => Encode (FcmpUoOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFcmpUoOp :: (Decode a) => Decode (FcmpUoOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFcmpUoOp :: Generic (FcmpUoOp a) _
derive instance newtypeFcmpUoOp :: Newtype (FcmpUoOp a) _
--------------------------------------------------------------------------------
_FcmpUoOp :: forall a. Iso' (FcmpUoOp a) { left :: a, right :: a }
_FcmpUoOp = _Newtype
--------------------------------------------------------------------------------
