-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FcmpLeOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FcmpLeOp a
  = FcmpLeOp
      { left :: a
      , right :: a
      }


instance showFcmpLeOp :: (Show a) => Show (FcmpLeOp a) where
  show x = genericShow x
derive instance eqFcmpLeOp :: (Eq a) => Eq (FcmpLeOp a)
derive instance ordFcmpLeOp :: (Ord a) => Ord (FcmpLeOp a)
instance encodeFcmpLeOp :: (Encode a) => Encode (FcmpLeOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFcmpLeOp :: (Decode a) => Decode (FcmpLeOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFcmpLeOp :: Generic (FcmpLeOp a) _
derive instance newtypeFcmpLeOp :: Newtype (FcmpLeOp a) _
--------------------------------------------------------------------------------
_FcmpLeOp :: forall a. Iso' (FcmpLeOp a) { left :: a, right :: a }
_FcmpLeOp = _Newtype
--------------------------------------------------------------------------------
