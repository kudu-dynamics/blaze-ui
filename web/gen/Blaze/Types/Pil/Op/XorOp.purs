-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.XorOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype XorOp a
  = XorOp
      { left :: a
      , right :: a
      }


instance showXorOp :: (Show a) => Show (XorOp a) where
  show x = genericShow x
derive instance eqXorOp :: (Eq a) => Eq (XorOp a)
derive instance ordXorOp :: (Ord a) => Ord (XorOp a)
instance encodeXorOp :: (Encode a) => Encode (XorOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeXorOp :: (Decode a) => Decode (XorOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericXorOp :: Generic (XorOp a) _
derive instance newtypeXorOp :: Newtype (XorOp a) _
--------------------------------------------------------------------------------
_XorOp :: forall a. Iso' (XorOp a) { left :: a, right :: a }
_XorOp = _Newtype
--------------------------------------------------------------------------------
