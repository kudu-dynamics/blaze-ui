-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.AdcOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype AdcOp a
  = AdcOp
      { left :: a
      , right :: a
      , carry :: a
      }


instance showAdcOp :: (Show a) => Show (AdcOp a) where
  show x = genericShow x
derive instance eqAdcOp :: (Eq a) => Eq (AdcOp a)
derive instance ordAdcOp :: (Ord a) => Ord (AdcOp a)
instance encodeAdcOp :: (Encode a) => Encode (AdcOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeAdcOp :: (Decode a) => Decode (AdcOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericAdcOp :: Generic (AdcOp a) _
derive instance newtypeAdcOp :: Newtype (AdcOp a) _
--------------------------------------------------------------------------------
_AdcOp :: forall a. Iso' (AdcOp a) { left :: a, right :: a, carry :: a }
_AdcOp = _Newtype
--------------------------------------------------------------------------------
