-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FcmpNeOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FcmpNeOp a
  = FcmpNeOp
      { left :: a
      , right :: a
      }


instance showFcmpNeOp :: (Show a) => Show (FcmpNeOp a) where
  show x = genericShow x
derive instance eqFcmpNeOp :: (Eq a) => Eq (FcmpNeOp a)
derive instance ordFcmpNeOp :: (Ord a) => Ord (FcmpNeOp a)
instance encodeFcmpNeOp :: (Encode a) => Encode (FcmpNeOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFcmpNeOp :: (Decode a) => Decode (FcmpNeOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFcmpNeOp :: Generic (FcmpNeOp a) _
derive instance newtypeFcmpNeOp :: Newtype (FcmpNeOp a) _
--------------------------------------------------------------------------------
_FcmpNeOp :: forall a. Iso' (FcmpNeOp a) { left :: a, right :: a }
_FcmpNeOp = _Newtype
--------------------------------------------------------------------------------
