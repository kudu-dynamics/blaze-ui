-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.AndOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype AndOp a
  = AndOp
      { left :: a
      , right :: a
      }


instance showAndOp :: (Show a) => Show (AndOp a) where
  show x = genericShow x
derive instance eqAndOp :: (Eq a) => Eq (AndOp a)
derive instance ordAndOp :: (Ord a) => Ord (AndOp a)
instance encodeAndOp :: (Encode a) => Encode (AndOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeAndOp :: (Decode a) => Decode (AndOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericAndOp :: Generic (AndOp a) _
derive instance newtypeAndOp :: Newtype (AndOp a) _
--------------------------------------------------------------------------------
_AndOp :: forall a. Iso' (AndOp a) { left :: a, right :: a }
_AndOp = _Newtype
--------------------------------------------------------------------------------
