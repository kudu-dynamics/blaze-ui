-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FcmpEOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FcmpEOp a
  = FcmpEOp
      { left :: a
      , right :: a
      }


instance showFcmpEOp :: (Show a) => Show (FcmpEOp a) where
  show x = genericShow x
derive instance eqFcmpEOp :: (Eq a) => Eq (FcmpEOp a)
derive instance ordFcmpEOp :: (Ord a) => Ord (FcmpEOp a)
instance encodeFcmpEOp :: (Encode a) => Encode (FcmpEOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFcmpEOp :: (Decode a) => Decode (FcmpEOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFcmpEOp :: Generic (FcmpEOp a) _
derive instance newtypeFcmpEOp :: Newtype (FcmpEOp a) _
--------------------------------------------------------------------------------
_FcmpEOp :: forall a. Iso' (FcmpEOp a) { left :: a, right :: a }
_FcmpEOp = _Newtype
--------------------------------------------------------------------------------
