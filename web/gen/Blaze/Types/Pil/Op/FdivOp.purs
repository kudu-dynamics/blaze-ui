-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FdivOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FdivOp a
  = FdivOp
      { left :: a
      , right :: a
      }


instance showFdivOp :: (Show a) => Show (FdivOp a) where
  show x = genericShow x
derive instance eqFdivOp :: (Eq a) => Eq (FdivOp a)
derive instance ordFdivOp :: (Ord a) => Ord (FdivOp a)
instance encodeFdivOp :: (Encode a) => Encode (FdivOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFdivOp :: (Decode a) => Decode (FdivOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFdivOp :: Generic (FdivOp a) _
derive instance newtypeFdivOp :: Newtype (FdivOp a) _
--------------------------------------------------------------------------------
_FdivOp :: forall a. Iso' (FdivOp a) { left :: a, right :: a }
_FdivOp = _Newtype
--------------------------------------------------------------------------------
