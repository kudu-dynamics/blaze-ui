-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FabsOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FabsOp a
  = FabsOp
      { src :: a
      }


instance showFabsOp :: (Show a) => Show (FabsOp a) where
  show x = genericShow x
derive instance eqFabsOp :: (Eq a) => Eq (FabsOp a)
derive instance ordFabsOp :: (Ord a) => Ord (FabsOp a)
instance encodeFabsOp :: (Encode a) => Encode (FabsOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFabsOp :: (Decode a) => Decode (FabsOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFabsOp :: Generic (FabsOp a) _
derive instance newtypeFabsOp :: Newtype (FabsOp a) _
--------------------------------------------------------------------------------
_FabsOp :: forall a. Iso' (FabsOp a) { src :: a }
_FabsOp = _Newtype
--------------------------------------------------------------------------------
