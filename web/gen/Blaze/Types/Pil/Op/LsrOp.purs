-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.LsrOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype LsrOp a
  = LsrOp
      { left :: a
      , right :: a
      }


instance showLsrOp :: (Show a) => Show (LsrOp a) where
  show x = genericShow x
derive instance eqLsrOp :: (Eq a) => Eq (LsrOp a)
derive instance ordLsrOp :: (Ord a) => Ord (LsrOp a)
instance encodeLsrOp :: (Encode a) => Encode (LsrOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeLsrOp :: (Decode a) => Decode (LsrOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericLsrOp :: Generic (LsrOp a) _
derive instance newtypeLsrOp :: Newtype (LsrOp a) _
--------------------------------------------------------------------------------
_LsrOp :: forall a. Iso' (LsrOp a) { left :: a, right :: a }
_LsrOp = _Newtype
--------------------------------------------------------------------------------
