-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.TestBitOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype TestBitOp a
  = TestBitOp
      { left :: a
      , right :: a
      }


instance showTestBitOp :: (Show a) => Show (TestBitOp a) where
  show x = genericShow x
derive instance eqTestBitOp :: (Eq a) => Eq (TestBitOp a)
derive instance ordTestBitOp :: (Ord a) => Ord (TestBitOp a)
instance encodeTestBitOp :: (Encode a) => Encode (TestBitOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeTestBitOp :: (Decode a) => Decode (TestBitOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericTestBitOp :: Generic (TestBitOp a) _
derive instance newtypeTestBitOp :: Newtype (TestBitOp a) _
--------------------------------------------------------------------------------
_TestBitOp :: forall a. Iso' (TestBitOp a) { left :: a, right :: a }
_TestBitOp = _Newtype
--------------------------------------------------------------------------------
