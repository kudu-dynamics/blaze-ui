-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.CmpUleOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype CmpUleOp a
  = CmpUleOp
      { left :: a
      , right :: a
      }


instance showCmpUleOp :: (Show a) => Show (CmpUleOp a) where
  show x = genericShow x
derive instance eqCmpUleOp :: (Eq a) => Eq (CmpUleOp a)
derive instance ordCmpUleOp :: (Ord a) => Ord (CmpUleOp a)
instance encodeCmpUleOp :: (Encode a) => Encode (CmpUleOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCmpUleOp :: (Decode a) => Decode (CmpUleOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCmpUleOp :: Generic (CmpUleOp a) _
derive instance newtypeCmpUleOp :: Newtype (CmpUleOp a) _
--------------------------------------------------------------------------------
_CmpUleOp :: forall a. Iso' (CmpUleOp a) { left :: a, right :: a }
_CmpUleOp = _Newtype
--------------------------------------------------------------------------------
