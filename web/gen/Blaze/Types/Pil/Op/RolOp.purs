-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.RolOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype RolOp a
  = RolOp
      { left :: a
      , right :: a
      }


instance showRolOp :: (Show a) => Show (RolOp a) where
  show x = genericShow x
derive instance eqRolOp :: (Eq a) => Eq (RolOp a)
derive instance ordRolOp :: (Ord a) => Ord (RolOp a)
instance encodeRolOp :: (Encode a) => Encode (RolOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeRolOp :: (Decode a) => Decode (RolOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericRolOp :: Generic (RolOp a) _
derive instance newtypeRolOp :: Newtype (RolOp a) _
--------------------------------------------------------------------------------
_RolOp :: forall a. Iso' (RolOp a) { left :: a, right :: a }
_RolOp = _Newtype
--------------------------------------------------------------------------------
