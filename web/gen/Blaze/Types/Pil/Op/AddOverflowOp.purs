-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.AddOverflowOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype AddOverflowOp a
  = AddOverflowOp
      { left :: a
      , right :: a
      }


instance showAddOverflowOp :: (Show a) => Show (AddOverflowOp a) where
  show x = genericShow x
derive instance eqAddOverflowOp :: (Eq a) => Eq (AddOverflowOp a)
derive instance ordAddOverflowOp :: (Ord a) => Ord (AddOverflowOp a)
instance encodeAddOverflowOp :: (Encode a) => Encode (AddOverflowOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeAddOverflowOp :: (Decode a) => Decode (AddOverflowOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericAddOverflowOp :: Generic (AddOverflowOp a) _
derive instance newtypeAddOverflowOp :: Newtype (AddOverflowOp a) _
--------------------------------------------------------------------------------
_AddOverflowOp :: forall a. Iso' (AddOverflowOp a) { left :: a, right :: a }
_AddOverflowOp = _Newtype
--------------------------------------------------------------------------------
