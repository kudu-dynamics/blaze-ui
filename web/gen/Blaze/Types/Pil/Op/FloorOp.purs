-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FloorOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FloorOp a
  = FloorOp
      { src :: a
      }


instance showFloorOp :: (Show a) => Show (FloorOp a) where
  show x = genericShow x
derive instance eqFloorOp :: (Eq a) => Eq (FloorOp a)
derive instance ordFloorOp :: (Ord a) => Ord (FloorOp a)
instance encodeFloorOp :: (Encode a) => Encode (FloorOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFloorOp :: (Decode a) => Decode (FloorOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFloorOp :: Generic (FloorOp a) _
derive instance newtypeFloorOp :: Newtype (FloorOp a) _
--------------------------------------------------------------------------------
_FloorOp :: forall a. Iso' (FloorOp a) { src :: a }
_FloorOp = _Newtype
--------------------------------------------------------------------------------
