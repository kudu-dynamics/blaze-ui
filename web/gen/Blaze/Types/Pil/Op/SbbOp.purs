-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.SbbOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype SbbOp a
  = SbbOp
      { left :: a
      , right :: a
      , carry :: a
      }


instance showSbbOp :: (Show a) => Show (SbbOp a) where
  show x = genericShow x
derive instance eqSbbOp :: (Eq a) => Eq (SbbOp a)
derive instance ordSbbOp :: (Ord a) => Ord (SbbOp a)
instance encodeSbbOp :: (Encode a) => Encode (SbbOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeSbbOp :: (Decode a) => Decode (SbbOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericSbbOp :: Generic (SbbOp a) _
derive instance newtypeSbbOp :: Newtype (SbbOp a) _
--------------------------------------------------------------------------------
_SbbOp :: forall a. Iso' (SbbOp a) { left :: a, right :: a, carry :: a }
_SbbOp = _Newtype
--------------------------------------------------------------------------------
