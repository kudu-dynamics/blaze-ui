-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.CmpSleOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype CmpSleOp a
  = CmpSleOp
      { left :: a
      , right :: a
      }


instance showCmpSleOp :: (Show a) => Show (CmpSleOp a) where
  show x = genericShow x
derive instance eqCmpSleOp :: (Eq a) => Eq (CmpSleOp a)
derive instance ordCmpSleOp :: (Ord a) => Ord (CmpSleOp a)
instance encodeCmpSleOp :: (Encode a) => Encode (CmpSleOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCmpSleOp :: (Decode a) => Decode (CmpSleOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCmpSleOp :: Generic (CmpSleOp a) _
derive instance newtypeCmpSleOp :: Newtype (CmpSleOp a) _
--------------------------------------------------------------------------------
_CmpSleOp :: forall a. Iso' (CmpSleOp a) { left :: a, right :: a }
_CmpSleOp = _Newtype
--------------------------------------------------------------------------------
