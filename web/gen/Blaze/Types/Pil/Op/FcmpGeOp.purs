-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FcmpGeOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FcmpGeOp a
  = FcmpGeOp
      { left :: a
      , right :: a
      }


instance showFcmpGeOp :: (Show a) => Show (FcmpGeOp a) where
  show x = genericShow x
derive instance eqFcmpGeOp :: (Eq a) => Eq (FcmpGeOp a)
derive instance ordFcmpGeOp :: (Ord a) => Ord (FcmpGeOp a)
instance encodeFcmpGeOp :: (Encode a) => Encode (FcmpGeOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFcmpGeOp :: (Decode a) => Decode (FcmpGeOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFcmpGeOp :: Generic (FcmpGeOp a) _
derive instance newtypeFcmpGeOp :: Newtype (FcmpGeOp a) _
--------------------------------------------------------------------------------
_FcmpGeOp :: forall a. Iso' (FcmpGeOp a) { left :: a, right :: a }
_FcmpGeOp = _Newtype
--------------------------------------------------------------------------------
