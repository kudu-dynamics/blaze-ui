-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.NotOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype NotOp a
  = NotOp
      { src :: a
      }


instance showNotOp :: (Show a) => Show (NotOp a) where
  show x = genericShow x
derive instance eqNotOp :: (Eq a) => Eq (NotOp a)
derive instance ordNotOp :: (Ord a) => Ord (NotOp a)
instance encodeNotOp :: (Encode a) => Encode (NotOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeNotOp :: (Decode a) => Decode (NotOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericNotOp :: Generic (NotOp a) _
derive instance newtypeNotOp :: Newtype (NotOp a) _
--------------------------------------------------------------------------------
_NotOp :: forall a. Iso' (NotOp a) { src :: a }
_NotOp = _Newtype
--------------------------------------------------------------------------------
