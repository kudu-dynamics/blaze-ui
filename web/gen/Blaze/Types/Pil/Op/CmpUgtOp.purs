-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.CmpUgtOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype CmpUgtOp a
  = CmpUgtOp
      { left :: a
      , right :: a
      }


instance showCmpUgtOp :: (Show a) => Show (CmpUgtOp a) where
  show x = genericShow x
derive instance eqCmpUgtOp :: (Eq a) => Eq (CmpUgtOp a)
derive instance ordCmpUgtOp :: (Ord a) => Ord (CmpUgtOp a)
instance encodeCmpUgtOp :: (Encode a) => Encode (CmpUgtOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCmpUgtOp :: (Decode a) => Decode (CmpUgtOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCmpUgtOp :: Generic (CmpUgtOp a) _
derive instance newtypeCmpUgtOp :: Newtype (CmpUgtOp a) _
--------------------------------------------------------------------------------
_CmpUgtOp :: forall a. Iso' (CmpUgtOp a) { left :: a, right :: a }
_CmpUgtOp = _Newtype
--------------------------------------------------------------------------------
