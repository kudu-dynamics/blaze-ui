-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.NegOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype NegOp a
  = NegOp
      { src :: a
      }


instance showNegOp :: (Show a) => Show (NegOp a) where
  show x = genericShow x
derive instance eqNegOp :: (Eq a) => Eq (NegOp a)
derive instance ordNegOp :: (Ord a) => Ord (NegOp a)
instance encodeNegOp :: (Encode a) => Encode (NegOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeNegOp :: (Decode a) => Decode (NegOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericNegOp :: Generic (NegOp a) _
derive instance newtypeNegOp :: Newtype (NegOp a) _
--------------------------------------------------------------------------------
_NegOp :: forall a. Iso' (NegOp a) { src :: a }
_NegOp = _Newtype
--------------------------------------------------------------------------------
