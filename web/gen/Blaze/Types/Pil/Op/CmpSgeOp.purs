-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.CmpSgeOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype CmpSgeOp a
  = CmpSgeOp
      { left :: a
      , right :: a
      }


instance showCmpSgeOp :: (Show a) => Show (CmpSgeOp a) where
  show x = genericShow x
derive instance eqCmpSgeOp :: (Eq a) => Eq (CmpSgeOp a)
derive instance ordCmpSgeOp :: (Ord a) => Ord (CmpSgeOp a)
instance encodeCmpSgeOp :: (Encode a) => Encode (CmpSgeOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCmpSgeOp :: (Decode a) => Decode (CmpSgeOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCmpSgeOp :: Generic (CmpSgeOp a) _
derive instance newtypeCmpSgeOp :: Newtype (CmpSgeOp a) _
--------------------------------------------------------------------------------
_CmpSgeOp :: forall a. Iso' (CmpSgeOp a) { left :: a, right :: a }
_CmpSgeOp = _Newtype
--------------------------------------------------------------------------------
