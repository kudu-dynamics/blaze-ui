-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FcmpLtOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FcmpLtOp a
  = FcmpLtOp
      { left :: a
      , right :: a
      }


instance showFcmpLtOp :: (Show a) => Show (FcmpLtOp a) where
  show x = genericShow x
derive instance eqFcmpLtOp :: (Eq a) => Eq (FcmpLtOp a)
derive instance ordFcmpLtOp :: (Ord a) => Ord (FcmpLtOp a)
instance encodeFcmpLtOp :: (Encode a) => Encode (FcmpLtOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFcmpLtOp :: (Decode a) => Decode (FcmpLtOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFcmpLtOp :: Generic (FcmpLtOp a) _
derive instance newtypeFcmpLtOp :: Newtype (FcmpLtOp a) _
--------------------------------------------------------------------------------
_FcmpLtOp :: forall a. Iso' (FcmpLtOp a) { left :: a, right :: a }
_FcmpLtOp = _Newtype
--------------------------------------------------------------------------------
