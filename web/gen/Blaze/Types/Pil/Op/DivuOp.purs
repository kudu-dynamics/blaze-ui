-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.DivuOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype DivuOp a
  = DivuOp
      { left :: a
      , right :: a
      }


instance showDivuOp :: (Show a) => Show (DivuOp a) where
  show x = genericShow x
derive instance eqDivuOp :: (Eq a) => Eq (DivuOp a)
derive instance ordDivuOp :: (Ord a) => Ord (DivuOp a)
instance encodeDivuOp :: (Encode a) => Encode (DivuOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeDivuOp :: (Decode a) => Decode (DivuOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericDivuOp :: Generic (DivuOp a) _
derive instance newtypeDivuOp :: Newtype (DivuOp a) _
--------------------------------------------------------------------------------
_DivuOp :: forall a. Iso' (DivuOp a) { left :: a, right :: a }
_DivuOp = _Newtype
--------------------------------------------------------------------------------
