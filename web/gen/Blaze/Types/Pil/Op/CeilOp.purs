-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.CeilOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype CeilOp a
  = CeilOp
      { src :: a
      }


instance showCeilOp :: (Show a) => Show (CeilOp a) where
  show x = genericShow x
derive instance eqCeilOp :: (Eq a) => Eq (CeilOp a)
derive instance ordCeilOp :: (Ord a) => Ord (CeilOp a)
instance encodeCeilOp :: (Encode a) => Encode (CeilOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCeilOp :: (Decode a) => Decode (CeilOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCeilOp :: Generic (CeilOp a) _
derive instance newtypeCeilOp :: Newtype (CeilOp a) _
--------------------------------------------------------------------------------
_CeilOp :: forall a. Iso' (CeilOp a) { src :: a }
_CeilOp = _Newtype
--------------------------------------------------------------------------------
