-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.CmpNeOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype CmpNeOp a
  = CmpNeOp
      { left :: a
      , right :: a
      }


instance showCmpNeOp :: (Show a) => Show (CmpNeOp a) where
  show x = genericShow x
derive instance eqCmpNeOp :: (Eq a) => Eq (CmpNeOp a)
derive instance ordCmpNeOp :: (Ord a) => Ord (CmpNeOp a)
instance encodeCmpNeOp :: (Encode a) => Encode (CmpNeOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCmpNeOp :: (Decode a) => Decode (CmpNeOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCmpNeOp :: Generic (CmpNeOp a) _
derive instance newtypeCmpNeOp :: Newtype (CmpNeOp a) _
--------------------------------------------------------------------------------
_CmpNeOp :: forall a. Iso' (CmpNeOp a) { left :: a, right :: a }
_CmpNeOp = _Newtype
--------------------------------------------------------------------------------
