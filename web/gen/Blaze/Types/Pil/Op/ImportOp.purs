-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.ImportOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)
import Prim (Int)

import Prelude

newtype ImportOp a
  = ImportOp
      { constant :: Int
      }


instance showImportOp :: Show (ImportOp a) where
  show x = genericShow x
derive instance eqImportOp :: Eq (ImportOp a)
derive instance ordImportOp :: Ord (ImportOp a)
instance encodeImportOp :: Encode (ImportOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeImportOp :: Decode (ImportOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericImportOp :: Generic (ImportOp a) _
derive instance newtypeImportOp :: Newtype (ImportOp a) _
--------------------------------------------------------------------------------
_ImportOp :: forall a. Iso' (ImportOp a) { constant :: Int }
_ImportOp = _Newtype
--------------------------------------------------------------------------------
