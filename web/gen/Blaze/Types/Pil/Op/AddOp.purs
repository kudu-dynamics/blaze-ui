-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.AddOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype AddOp a
  = AddOp
      { left :: a
      , right :: a
      }


instance showAddOp :: (Show a) => Show (AddOp a) where
  show x = genericShow x
derive instance eqAddOp :: (Eq a) => Eq (AddOp a)
derive instance ordAddOp :: (Ord a) => Ord (AddOp a)
instance encodeAddOp :: (Encode a) => Encode (AddOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeAddOp :: (Decode a) => Decode (AddOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericAddOp :: Generic (AddOp a) _
derive instance newtypeAddOp :: Newtype (AddOp a) _
--------------------------------------------------------------------------------
_AddOp :: forall a. Iso' (AddOp a) { left :: a, right :: a }
_AddOp = _Newtype
--------------------------------------------------------------------------------
