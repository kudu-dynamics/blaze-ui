-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.CmpSgtOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype CmpSgtOp a
  = CmpSgtOp
      { left :: a
      , right :: a
      }


instance showCmpSgtOp :: (Show a) => Show (CmpSgtOp a) where
  show x = genericShow x
derive instance eqCmpSgtOp :: (Eq a) => Eq (CmpSgtOp a)
derive instance ordCmpSgtOp :: (Ord a) => Ord (CmpSgtOp a)
instance encodeCmpSgtOp :: (Encode a) => Encode (CmpSgtOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCmpSgtOp :: (Decode a) => Decode (CmpSgtOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCmpSgtOp :: Generic (CmpSgtOp a) _
derive instance newtypeCmpSgtOp :: Newtype (CmpSgtOp a) _
--------------------------------------------------------------------------------
_CmpSgtOp :: forall a. Iso' (CmpSgtOp a) { left :: a, right :: a }
_CmpSgtOp = _Newtype
--------------------------------------------------------------------------------
