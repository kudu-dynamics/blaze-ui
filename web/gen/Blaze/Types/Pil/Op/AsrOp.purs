-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.AsrOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype AsrOp a
  = AsrOp
      { left :: a
      , right :: a
      }


instance showAsrOp :: (Show a) => Show (AsrOp a) where
  show x = genericShow x
derive instance eqAsrOp :: (Eq a) => Eq (AsrOp a)
derive instance ordAsrOp :: (Ord a) => Ord (AsrOp a)
instance encodeAsrOp :: (Encode a) => Encode (AsrOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeAsrOp :: (Decode a) => Decode (AsrOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericAsrOp :: Generic (AsrOp a) _
derive instance newtypeAsrOp :: Newtype (AsrOp a) _
--------------------------------------------------------------------------------
_AsrOp :: forall a. Iso' (AsrOp a) { left :: a, right :: a }
_AsrOp = _Newtype
--------------------------------------------------------------------------------
