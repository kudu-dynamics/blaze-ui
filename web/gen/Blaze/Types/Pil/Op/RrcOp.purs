-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.RrcOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype RrcOp a
  = RrcOp
      { left :: a
      , right :: a
      , carry :: a
      }


instance showRrcOp :: (Show a) => Show (RrcOp a) where
  show x = genericShow x
derive instance eqRrcOp :: (Eq a) => Eq (RrcOp a)
derive instance ordRrcOp :: (Ord a) => Ord (RrcOp a)
instance encodeRrcOp :: (Encode a) => Encode (RrcOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeRrcOp :: (Decode a) => Decode (RrcOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericRrcOp :: Generic (RrcOp a) _
derive instance newtypeRrcOp :: Newtype (RrcOp a) _
--------------------------------------------------------------------------------
_RrcOp :: forall a. Iso' (RrcOp a) { left :: a, right :: a, carry :: a }
_RrcOp = _Newtype
--------------------------------------------------------------------------------
