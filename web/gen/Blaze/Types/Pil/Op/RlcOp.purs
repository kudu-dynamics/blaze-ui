-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.RlcOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype RlcOp a
  = RlcOp
      { left :: a
      , right :: a
      , carry :: a
      }


instance showRlcOp :: (Show a) => Show (RlcOp a) where
  show x = genericShow x
derive instance eqRlcOp :: (Eq a) => Eq (RlcOp a)
derive instance ordRlcOp :: (Ord a) => Ord (RlcOp a)
instance encodeRlcOp :: (Encode a) => Encode (RlcOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeRlcOp :: (Decode a) => Decode (RlcOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericRlcOp :: Generic (RlcOp a) _
derive instance newtypeRlcOp :: Newtype (RlcOp a) _
--------------------------------------------------------------------------------
_RlcOp :: forall a. Iso' (RlcOp a) { left :: a, right :: a, carry :: a }
_RlcOp = _Newtype
--------------------------------------------------------------------------------
