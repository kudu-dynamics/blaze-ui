-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FcmpGtOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FcmpGtOp a
  = FcmpGtOp
      { left :: a
      , right :: a
      }


instance showFcmpGtOp :: (Show a) => Show (FcmpGtOp a) where
  show x = genericShow x
derive instance eqFcmpGtOp :: (Eq a) => Eq (FcmpGtOp a)
derive instance ordFcmpGtOp :: (Ord a) => Ord (FcmpGtOp a)
instance encodeFcmpGtOp :: (Encode a) => Encode (FcmpGtOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFcmpGtOp :: (Decode a) => Decode (FcmpGtOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFcmpGtOp :: Generic (FcmpGtOp a) _
derive instance newtypeFcmpGtOp :: Newtype (FcmpGtOp a) _
--------------------------------------------------------------------------------
_FcmpGtOp :: forall a. Iso' (FcmpGtOp a) { left :: a, right :: a }
_FcmpGtOp = _Newtype
--------------------------------------------------------------------------------
