-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.RorOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype RorOp a
  = RorOp
      { left :: a
      , right :: a
      }


instance showRorOp :: (Show a) => Show (RorOp a) where
  show x = genericShow x
derive instance eqRorOp :: (Eq a) => Eq (RorOp a)
derive instance ordRorOp :: (Ord a) => Ord (RorOp a)
instance encodeRorOp :: (Encode a) => Encode (RorOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeRorOp :: (Decode a) => Decode (RorOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericRorOp :: Generic (RorOp a) _
derive instance newtypeRorOp :: Newtype (RorOp a) _
--------------------------------------------------------------------------------
_RorOp :: forall a. Iso' (RorOp a) { left :: a, right :: a }
_RorOp = _Newtype
--------------------------------------------------------------------------------
