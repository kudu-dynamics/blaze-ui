-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.CmpEOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype CmpEOp a
  = CmpEOp
      { left :: a
      , right :: a
      }


instance showCmpEOp :: (Show a) => Show (CmpEOp a) where
  show x = genericShow x
derive instance eqCmpEOp :: (Eq a) => Eq (CmpEOp a)
derive instance ordCmpEOp :: (Ord a) => Ord (CmpEOp a)
instance encodeCmpEOp :: (Encode a) => Encode (CmpEOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCmpEOp :: (Decode a) => Decode (CmpEOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCmpEOp :: Generic (CmpEOp a) _
derive instance newtypeCmpEOp :: Newtype (CmpEOp a) _
--------------------------------------------------------------------------------
_CmpEOp :: forall a. Iso' (CmpEOp a) { left :: a, right :: a }
_CmpEOp = _Newtype
--------------------------------------------------------------------------------
