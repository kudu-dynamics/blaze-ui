-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.MulsDpOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype MulsDpOp a
  = MulsDpOp
      { left :: a
      , right :: a
      }


instance showMulsDpOp :: (Show a) => Show (MulsDpOp a) where
  show x = genericShow x
derive instance eqMulsDpOp :: (Eq a) => Eq (MulsDpOp a)
derive instance ordMulsDpOp :: (Ord a) => Ord (MulsDpOp a)
instance encodeMulsDpOp :: (Encode a) => Encode (MulsDpOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeMulsDpOp :: (Decode a) => Decode (MulsDpOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericMulsDpOp :: Generic (MulsDpOp a) _
derive instance newtypeMulsDpOp :: Newtype (MulsDpOp a) _
--------------------------------------------------------------------------------
_MulsDpOp :: forall a. Iso' (MulsDpOp a) { left :: a, right :: a }
_MulsDpOp = _Newtype
--------------------------------------------------------------------------------
