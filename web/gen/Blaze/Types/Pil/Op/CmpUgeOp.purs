-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.CmpUgeOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype CmpUgeOp a
  = CmpUgeOp
      { left :: a
      , right :: a
      }


instance showCmpUgeOp :: (Show a) => Show (CmpUgeOp a) where
  show x = genericShow x
derive instance eqCmpUgeOp :: (Eq a) => Eq (CmpUgeOp a)
derive instance ordCmpUgeOp :: (Ord a) => Ord (CmpUgeOp a)
instance encodeCmpUgeOp :: (Encode a) => Encode (CmpUgeOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCmpUgeOp :: (Decode a) => Decode (CmpUgeOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCmpUgeOp :: Generic (CmpUgeOp a) _
derive instance newtypeCmpUgeOp :: Newtype (CmpUgeOp a) _
--------------------------------------------------------------------------------
_CmpUgeOp :: forall a. Iso' (CmpUgeOp a) { left :: a, right :: a }
_CmpUgeOp = _Newtype
--------------------------------------------------------------------------------
