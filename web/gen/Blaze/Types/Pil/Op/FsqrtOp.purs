-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FsqrtOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FsqrtOp a
  = FsqrtOp
      { src :: a
      }


instance showFsqrtOp :: (Show a) => Show (FsqrtOp a) where
  show x = genericShow x
derive instance eqFsqrtOp :: (Eq a) => Eq (FsqrtOp a)
derive instance ordFsqrtOp :: (Ord a) => Ord (FsqrtOp a)
instance encodeFsqrtOp :: (Encode a) => Encode (FsqrtOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFsqrtOp :: (Decode a) => Decode (FsqrtOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFsqrtOp :: Generic (FsqrtOp a) _
derive instance newtypeFsqrtOp :: Newtype (FsqrtOp a) _
--------------------------------------------------------------------------------
_FsqrtOp :: forall a. Iso' (FsqrtOp a) { src :: a }
_FsqrtOp = _Newtype
--------------------------------------------------------------------------------
