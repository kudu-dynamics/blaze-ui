-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.CmpSltOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype CmpSltOp a
  = CmpSltOp
      { left :: a
      , right :: a
      }


instance showCmpSltOp :: (Show a) => Show (CmpSltOp a) where
  show x = genericShow x
derive instance eqCmpSltOp :: (Eq a) => Eq (CmpSltOp a)
derive instance ordCmpSltOp :: (Ord a) => Ord (CmpSltOp a)
instance encodeCmpSltOp :: (Encode a) => Encode (CmpSltOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCmpSltOp :: (Decode a) => Decode (CmpSltOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCmpSltOp :: Generic (CmpSltOp a) _
derive instance newtypeCmpSltOp :: Newtype (CmpSltOp a) _
--------------------------------------------------------------------------------
_CmpSltOp :: forall a. Iso' (CmpSltOp a) { left :: a, right :: a }
_CmpSltOp = _Newtype
--------------------------------------------------------------------------------
