-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.CmpUltOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype CmpUltOp a
  = CmpUltOp
      { left :: a
      , right :: a
      }


instance showCmpUltOp :: (Show a) => Show (CmpUltOp a) where
  show x = genericShow x
derive instance eqCmpUltOp :: (Eq a) => Eq (CmpUltOp a)
derive instance ordCmpUltOp :: (Ord a) => Ord (CmpUltOp a)
instance encodeCmpUltOp :: (Encode a) => Encode (CmpUltOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCmpUltOp :: (Decode a) => Decode (CmpUltOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCmpUltOp :: Generic (CmpUltOp a) _
derive instance newtypeCmpUltOp :: Newtype (CmpUltOp a) _
--------------------------------------------------------------------------------
_CmpUltOp :: forall a. Iso' (CmpUltOp a) { left :: a, right :: a }
_CmpUltOp = _Newtype
--------------------------------------------------------------------------------
