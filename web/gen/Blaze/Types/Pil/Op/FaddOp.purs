-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FaddOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FaddOp a
  = FaddOp
      { left :: a
      , right :: a
      }


instance showFaddOp :: (Show a) => Show (FaddOp a) where
  show x = genericShow x
derive instance eqFaddOp :: (Eq a) => Eq (FaddOp a)
derive instance ordFaddOp :: (Ord a) => Ord (FaddOp a)
instance encodeFaddOp :: (Encode a) => Encode (FaddOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFaddOp :: (Decode a) => Decode (FaddOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFaddOp :: Generic (FaddOp a) _
derive instance newtypeFaddOp :: Newtype (FaddOp a) _
--------------------------------------------------------------------------------
_FaddOp :: forall a. Iso' (FaddOp a) { left :: a, right :: a }
_FaddOp = _Newtype
--------------------------------------------------------------------------------
