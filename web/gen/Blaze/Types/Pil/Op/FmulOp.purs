-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FmulOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FmulOp a
  = FmulOp
      { left :: a
      , right :: a
      }


instance showFmulOp :: (Show a) => Show (FmulOp a) where
  show x = genericShow x
derive instance eqFmulOp :: (Eq a) => Eq (FmulOp a)
derive instance ordFmulOp :: (Ord a) => Ord (FmulOp a)
instance encodeFmulOp :: (Encode a) => Encode (FmulOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFmulOp :: (Decode a) => Decode (FmulOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFmulOp :: Generic (FmulOp a) _
derive instance newtypeFmulOp :: Newtype (FmulOp a) _
--------------------------------------------------------------------------------
_FmulOp :: forall a. Iso' (FmulOp a) { left :: a, right :: a }
_FmulOp = _Newtype
--------------------------------------------------------------------------------
