-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.OrOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype OrOp a
  = OrOp
      { left :: a
      , right :: a
      }


instance showOrOp :: (Show a) => Show (OrOp a) where
  show x = genericShow x
derive instance eqOrOp :: (Eq a) => Eq (OrOp a)
derive instance ordOrOp :: (Ord a) => Ord (OrOp a)
instance encodeOrOp :: (Encode a) => Encode (OrOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeOrOp :: (Decode a) => Decode (OrOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericOrOp :: Generic (OrOp a) _
derive instance newtypeOrOp :: Newtype (OrOp a) _
--------------------------------------------------------------------------------
_OrOp :: forall a. Iso' (OrOp a) { left :: a, right :: a }
_OrOp = _Newtype
--------------------------------------------------------------------------------
