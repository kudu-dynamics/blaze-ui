-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.FsubOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype FsubOp a
  = FsubOp
      { left :: a
      , right :: a
      }


instance showFsubOp :: (Show a) => Show (FsubOp a) where
  show x = genericShow x
derive instance eqFsubOp :: (Eq a) => Eq (FsubOp a)
derive instance ordFsubOp :: (Ord a) => Ord (FsubOp a)
instance encodeFsubOp :: (Encode a) => Encode (FsubOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeFsubOp :: (Decode a) => Decode (FsubOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericFsubOp :: Generic (FsubOp a) _
derive instance newtypeFsubOp :: Newtype (FsubOp a) _
--------------------------------------------------------------------------------
_FsubOp :: forall a. Iso' (FsubOp a) { left :: a, right :: a }
_FsubOp = _Newtype
--------------------------------------------------------------------------------
