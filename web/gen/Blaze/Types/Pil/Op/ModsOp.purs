-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Op.ModsOp where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)

import Prelude

newtype ModsOp a
  = ModsOp
      { left :: a
      , right :: a
      }


instance showModsOp :: (Show a) => Show (ModsOp a) where
  show x = genericShow x
derive instance eqModsOp :: (Eq a) => Eq (ModsOp a)
derive instance ordModsOp :: (Ord a) => Ord (ModsOp a)
instance encodeModsOp :: (Encode a) => Encode (ModsOp a) where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeModsOp :: (Decode a) => Decode (ModsOp a) where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericModsOp :: Generic (ModsOp a) _
derive instance newtypeModsOp :: Newtype (ModsOp a) _
--------------------------------------------------------------------------------
_ModsOp :: forall a. Iso' (ModsOp a) { left :: a, right :: a }
_ModsOp = _Newtype
--------------------------------------------------------------------------------
