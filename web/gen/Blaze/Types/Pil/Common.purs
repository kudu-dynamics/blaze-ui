-- File auto generated by purescript-bridge! --
module Blaze.Types.Pil.Common where

import Blaze.Types.Function (Function)
import Data.BinaryAnalysis (ByteOffset)
import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)
import Prim (Int, String)

import Prelude

newtype CtxIndex
  = CtxIndex Int


instance showCtxIndex :: Show CtxIndex where
  show x = genericShow x
derive instance eqCtxIndex :: Eq CtxIndex
derive instance ordCtxIndex :: Ord CtxIndex
instance encodeCtxIndex :: Encode CtxIndex where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCtxIndex :: Decode CtxIndex where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCtxIndex :: Generic CtxIndex _
derive instance newtypeCtxIndex :: Newtype CtxIndex _
--------------------------------------------------------------------------------
_CtxIndex :: Iso' CtxIndex Int
_CtxIndex = _Newtype
--------------------------------------------------------------------------------
newtype Ctx
  = Ctx
      { func :: Function
      , ctxIndex :: CtxIndex
      }


instance showCtx :: Show Ctx where
  show x = genericShow x
derive instance eqCtx :: Eq Ctx
derive instance ordCtx :: Ord Ctx
instance encodeCtx :: Encode Ctx where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeCtx :: Decode Ctx where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericCtx :: Generic Ctx _
derive instance newtypeCtx :: Newtype Ctx _
--------------------------------------------------------------------------------
_Ctx :: Iso' Ctx { func :: Function, ctxIndex :: CtxIndex }
_Ctx = _Newtype
--------------------------------------------------------------------------------
newtype PilVar
  = PilVar
      { symbol :: String
      , ctx :: Maybe Ctx
      }


instance showPilVar :: Show PilVar where
  show x = genericShow x
derive instance eqPilVar :: Eq PilVar
derive instance ordPilVar :: Ord PilVar
instance encodePilVar :: Encode PilVar where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodePilVar :: Decode PilVar where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericPilVar :: Generic PilVar _
derive instance newtypePilVar :: Newtype PilVar _
--------------------------------------------------------------------------------
_PilVar :: Iso' PilVar { symbol :: String, ctx :: Maybe Ctx }
_PilVar = _Newtype
--------------------------------------------------------------------------------
newtype StackOffset
  = StackOffset
      { ctx :: Ctx
      , offset :: ByteOffset
      }


instance showStackOffset :: Show StackOffset where
  show x = genericShow x
derive instance eqStackOffset :: Eq StackOffset
derive instance ordStackOffset :: Ord StackOffset
instance encodeStackOffset :: Encode StackOffset where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeStackOffset :: Decode StackOffset where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericStackOffset :: Generic StackOffset _
derive instance newtypeStackOffset :: Newtype StackOffset _
--------------------------------------------------------------------------------
_StackOffset :: Iso' StackOffset { ctx :: Ctx, offset :: ByteOffset }
_StackOffset = _Newtype
--------------------------------------------------------------------------------
