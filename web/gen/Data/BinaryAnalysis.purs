-- File auto generated by purescript-bridge! --
module Data.BinaryAnalysis where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (aesonSumEncoding, defaultOptions, genericDecode, genericEncode)
import Foreign.Generic.EnumEncoding (defaultGenericEnumOptions, genericDecodeEnum, genericEncodeEnum)
import Prim (Int, String)

import Prelude

newtype Bytes
  = Bytes Int


instance showBytes :: Show Bytes where
  show x = genericShow x
derive instance eqBytes :: Eq Bytes
derive instance ordBytes :: Ord Bytes
instance encodeBytes :: Encode Bytes where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeBytes :: Decode Bytes where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericBytes :: Generic Bytes _
derive instance newtypeBytes :: Newtype Bytes _
--------------------------------------------------------------------------------
_Bytes :: Iso' Bytes Int
_Bytes = _Newtype
--------------------------------------------------------------------------------
newtype Bits
  = Bits Int


instance showBits :: Show Bits where
  show x = genericShow x
derive instance eqBits :: Eq Bits
derive instance ordBits :: Ord Bits
instance encodeBits :: Encode Bits where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeBits :: Decode Bits where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericBits :: Generic Bits _
derive instance newtypeBits :: Newtype Bits _
--------------------------------------------------------------------------------
_Bits :: Iso' Bits Int
_Bits = _Newtype
--------------------------------------------------------------------------------
newtype ByteOffset
  = ByteOffset Int


instance showByteOffset :: Show ByteOffset where
  show x = genericShow x
derive instance eqByteOffset :: Eq ByteOffset
derive instance ordByteOffset :: Ord ByteOffset
instance encodeByteOffset :: Encode ByteOffset where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeByteOffset :: Decode ByteOffset where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericByteOffset :: Generic ByteOffset _
derive instance newtypeByteOffset :: Newtype ByteOffset _
--------------------------------------------------------------------------------
_ByteOffset :: Iso' ByteOffset Int
_ByteOffset = _Newtype
--------------------------------------------------------------------------------
newtype BitOffset
  = BitOffset Int


instance showBitOffset :: Show BitOffset where
  show x = genericShow x
derive instance eqBitOffset :: Eq BitOffset
derive instance ordBitOffset :: Ord BitOffset
instance encodeBitOffset :: Encode BitOffset where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeBitOffset :: Decode BitOffset where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericBitOffset :: Generic BitOffset _
derive instance newtypeBitOffset :: Newtype BitOffset _
--------------------------------------------------------------------------------
_BitOffset :: Iso' BitOffset Int
_BitOffset = _Newtype
--------------------------------------------------------------------------------
newtype AddressWidth
  = AddressWidth
      { bits :: Bits
      }


instance showAddressWidth :: Show AddressWidth where
  show x = genericShow x
derive instance eqAddressWidth :: Eq AddressWidth
derive instance ordAddressWidth :: Ord AddressWidth
instance encodeAddressWidth :: Encode AddressWidth where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeAddressWidth :: Decode AddressWidth where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericAddressWidth :: Generic AddressWidth _
derive instance newtypeAddressWidth :: Newtype AddressWidth _
--------------------------------------------------------------------------------
_AddressWidth :: Iso' AddressWidth { bits :: Bits }
_AddressWidth = _Newtype
--------------------------------------------------------------------------------
newtype Address
  = Address Bytes


instance showAddress :: Show Address where
  show x = genericShow x
derive instance eqAddress :: Eq Address
derive instance ordAddress :: Ord Address
instance encodeAddress :: Encode Address where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeAddress :: Decode Address where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericAddress :: Generic Address _
derive instance newtypeAddress :: Newtype Address _
--------------------------------------------------------------------------------
_Address :: Iso' Address Bytes
_Address = _Newtype
--------------------------------------------------------------------------------
newtype Symbol
  = Symbol
      { _symbolName :: String
      , _symbolRawName :: String
      }


instance showSymbol :: Show Symbol where
  show x = genericShow x
derive instance eqSymbol :: Eq Symbol
derive instance ordSymbol :: Ord Symbol
instance encodeSymbol :: Encode Symbol where
  encode value = genericEncode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
instance decodeSymbol :: Decode Symbol where
  decode value = genericDecode (defaultOptions { unwrapSingleConstructors = true
                                               , sumEncoding = aesonSumEncoding
                                               , unwrapSingleArguments = true
                                               }) value
derive instance genericSymbol :: Generic Symbol _
derive instance newtypeSymbol :: Newtype Symbol _
--------------------------------------------------------------------------------
_Symbol :: Iso' Symbol { _symbolName :: String, _symbolRawName :: String }
_Symbol = _Newtype

symbolName :: Lens' Symbol String
symbolName = _Newtype <<< prop (SProxy :: SProxy "_symbolName")

symbolRawName :: Lens' Symbol String
symbolRawName = _Newtype <<< prop (SProxy :: SProxy "_symbolRawName")
--------------------------------------------------------------------------------
